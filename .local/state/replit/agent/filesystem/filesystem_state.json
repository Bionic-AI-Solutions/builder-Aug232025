{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# MCP Builder\n\n## Overview\n\nMCP Builder is a full-stack web application for developing and managing MCP (Model Context Protocol) applications through a conversational interface. The platform allows users to create, configure, and deploy applications using various AI models while managing MCP server connections and accessing a marketplace of pre-built solutions.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development and building\n- **UI Components**: Shadcn/ui component library with Radix UI primitives for consistent, accessible interface components\n- **Styling**: Tailwind CSS with custom design system including brand colors and gradients\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: Zustand for authentication state, React Query for server state management\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js REST API server\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Development Storage**: In-memory storage implementation for development/demo purposes\n- **API Design**: RESTful endpoints for users, projects, MCP servers, chat messages, and marketplace apps\n- **Authentication**: Simple credential-based authentication (demo implementation)\n\n### Data Storage Solutions\n- **ORM**: Drizzle ORM with PostgreSQL dialect for production database operations\n- **Schema**: Comprehensive database schema including users, projects, MCP servers, chat messages, and marketplace apps\n- **Migrations**: Drizzle Kit for database schema migrations and management\n- **Connection**: Neon Database serverless PostgreSQL for cloud database hosting\n\n### Authentication and Authorization\n- **Authentication**: Email/password based authentication with session management\n- **Session Storage**: Connect-pg-simple for PostgreSQL session storage\n- **User Management**: User profiles with plan-based access control (free, professional, etc.)\n- **Demo Mode**: Built-in demo user for easy testing and demonstration\n\n### Key Features and Components\n- **Chat Development Interface**: Real-time conversational interface for application development\n- **Project Management**: Full CRUD operations for managing development projects\n- **MCP Server Management**: Configuration and monitoring of MCP server connections\n- **Marketplace**: Browse and deploy pre-built applications and components\n- **Analytics Dashboard**: Usage tracking and performance monitoring\n- **Billing System**: Subscription management and usage tracking\n- **Admin Panel**: Administrative tools for platform management\n\n### Development Workflow\n- **Hot Reload**: Vite development server with HMR for instant feedback\n- **Type Safety**: Full TypeScript coverage across frontend, backend, and shared schemas\n- **Error Handling**: Comprehensive error boundaries and API error handling\n- **Logging**: Request/response logging with performance metrics\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless**: Serverless PostgreSQL database connection\n- **drizzle-orm**: Type-safe ORM for database operations\n- **drizzle-kit**: Database schema management and migrations\n- **@tanstack/react-query**: Server state management and caching\n- **express**: Node.js web application framework\n\n### UI and Component Libraries\n- **@radix-ui/***: Comprehensive set of accessible UI primitives\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Component variant management\n- **lucide-react**: Icon library\n\n### Development Tools\n- **vite**: Fast build tool and development server\n- **typescript**: Static type checking\n- **tsx**: TypeScript execution for Node.js\n- **esbuild**: Fast JavaScript bundler for production builds\n\n### Authentication and Session Management\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n- **zustand**: Lightweight state management for client-side auth state\n\n### Form Handling and Validation\n- **react-hook-form**: Performant forms with minimal re-renders\n- **@hookform/resolvers**: Validation resolvers for React Hook Form\n- **zod**: Schema validation and type inference\n- **drizzle-zod**: Integration between Drizzle and Zod schemas\n\n### Additional Utilities\n- **date-fns**: Date manipulation and formatting\n- **clsx**: Conditional className utility\n- **nanoid**: Unique ID generation\n- **wouter**: Lightweight React router","size_bytes":4578},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        // Brand colors\n        brand: {\n          blue: \"var(--brand-blue)\",\n          emerald: \"var(--brand-emerald)\",\n          amber: \"var(--brand-amber)\",\n          slate: \"var(--brand-slate)\",\n          gray: \"var(--brand-gray)\",\n        }\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n      },\n      backgroundImage: {\n        'gradient-brand': 'var(--gradient-brand)',\n        'gradient-bg': 'var(--gradient-bg)',\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2633},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertProjectSchema, insertMcpServerSchema, insertChatMessageSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      const user = await storage.getUserByEmail(email);\n      \n      if (!user || user.password !== password) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n      \n      res.json({ user: { ...user, password: undefined } });\n    } catch (error) {\n      res.status(500).json({ error: \"Login failed\" });\n    }\n  });\n\n  // User routes\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      res.json({ ...user, password: undefined });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch user\" });\n    }\n  });\n\n  // Project routes\n  app.get(\"/api/projects\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      if (!userId) {\n        return res.status(400).json({ error: \"User ID required\" });\n      }\n      const projects = await storage.getProjects(userId);\n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.get(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const project = await storage.getProject(req.params.id);\n      if (!project) {\n        return res.status(404).json({ error: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch project\" });\n    }\n  });\n\n  app.post(\"/api/projects\", async (req, res) => {\n    try {\n      const validatedData = insertProjectSchema.parse(req.body);\n      const project = await storage.createProject(validatedData);\n      res.status(201).json(project);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid project data\" });\n    }\n  });\n\n  app.patch(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const project = await storage.updateProject(req.params.id, updates);\n      if (!project) {\n        return res.status(404).json({ error: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update project\" });\n    }\n  });\n\n  // MCP Server routes\n  app.get(\"/api/mcp-servers\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      if (!userId) {\n        return res.status(400).json({ error: \"User ID required\" });\n      }\n      const servers = await storage.getMcpServers(userId);\n      res.json(servers);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch MCP servers\" });\n    }\n  });\n\n  app.post(\"/api/mcp-servers\", async (req, res) => {\n    try {\n      const validatedData = insertMcpServerSchema.parse(req.body);\n      const server = await storage.createMcpServer(validatedData);\n      res.status(201).json(server);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid server data\" });\n    }\n  });\n\n  app.put(\"/api/mcp-servers/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const server = await storage.updateMcpServer(req.params.id, updates);\n      if (!server) {\n        return res.status(404).json({ error: \"Server not found\" });\n      }\n      res.json(server);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update server\" });\n    }\n  });\n\n  app.delete(\"/api/mcp-servers/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteMcpServer(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Server not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete server\" });\n    }\n  });\n\n  // Chat routes\n  app.get(\"/api/chat/messages\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      if (!userId) {\n        return res.status(400).json({ error: \"User ID required\" });\n      }\n      const messages = await storage.getChatMessages(userId);\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch chat messages\" });\n    }\n  });\n\n  app.post(\"/api/chat/messages\", async (req, res) => {\n    try {\n      const validatedData = insertChatMessageSchema.parse(req.body);\n      const message = await storage.createChatMessage(validatedData);\n      \n      // Simulate AI response for user messages\n      if (validatedData.sender === \"user\") {\n        setTimeout(async () => {\n          const aiResponses = [\n            \"I'll help you build that application. Let me analyze your requirements and suggest the best approach with the right MCP servers and components.\",\n            \"Great idea! I can create a app for you. Would you like me to start with the core functionality or focus on specific features first?\",\n            \"Perfect! I'll design an application that meets your needs. Let me recommend the optimal tech stack and MCP server configuration for this project.\",\n            \"I can create a app for you that tracks user analytics. Let me understand your requirements:\\n\\n**What specific metrics do you want to track?**\\n• Real-time engagement metrics and revenue tracking\\n• User activity, engagement rates, revenue visualization\\n• Conversion analysis and funnel metrics\\n• Performance benchmarks and growth indicators\\n\\nShall I start building the dashboard structure with these features?\"\n          ];\n          \n          const randomResponse = aiResponses[Math.floor(Math.random() * aiResponses.length)];\n          await storage.createChatMessage({\n            userId: validatedData.userId,\n            sender: \"ai\",\n            message: randomResponse\n          });\n        }, 1000);\n      }\n      \n      res.status(201).json(message);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid message data\" });\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/users\", async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      // Remove passwords from response\n      const sanitizedUsers = users.map(user => ({ ...user, password: undefined }));\n      res.json(sanitizedUsers);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      // Remove sensitive fields that shouldn't be updated via admin panel\n      const { password, ...safeUpdates } = updates;\n      \n      const updatedUser = await storage.updateUser(id, safeUpdates);\n      if (!updatedUser) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      res.json({ ...updatedUser, password: undefined });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update user\" });\n    }\n  });\n\n  app.delete(\"/api/admin/users/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Prevent deletion of demo user\n      if (id === \"demo-user-id\") {\n        return res.status(403).json({ error: \"Cannot delete demo user\" });\n      }\n      \n      const success = await storage.deleteUser(id);\n      if (!success) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete user\" });\n    }\n  });\n\n  // Marketplace routes\n  app.get(\"/api/marketplace\", async (req, res) => {\n    try {\n      const apps = await storage.getMarketplaceApps();\n      res.json(apps);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch marketplace apps\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":8193},"server/storage.ts":{"content":"import { type User, type InsertUser, type Project, type InsertProject, type McpServer, type InsertMcpServer, type ChatMessage, type InsertChatMessage, type MarketplaceApp, type InsertMarketplaceApp } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  deleteUser(id: string): Promise<boolean>;\n  \n  // Projects\n  getProjects(userId: string): Promise<Project[]>;\n  getProject(id: string): Promise<Project | undefined>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, updates: Partial<Project>): Promise<Project | undefined>;\n  \n  // MCP Servers\n  getMcpServers(userId: string): Promise<McpServer[]>;\n  getMcpServer(id: string): Promise<McpServer | undefined>;\n  createMcpServer(server: InsertMcpServer): Promise<McpServer>;\n  updateMcpServer(id: string, updates: Partial<McpServer>): Promise<McpServer | undefined>;\n  deleteMcpServer(id: string): Promise<boolean>;\n  \n  // Chat Messages\n  getChatMessages(userId: string): Promise<ChatMessage[]>;\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  \n  // Marketplace Apps\n  getMarketplaceApps(): Promise<MarketplaceApp[]>;\n  getMarketplaceApp(id: string): Promise<MarketplaceApp | undefined>;\n  createMarketplaceApp(app: InsertMarketplaceApp): Promise<MarketplaceApp>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private projects: Map<string, Project> = new Map();\n  private mcpServers: Map<string, McpServer> = new Map();\n  private chatMessages: Map<string, ChatMessage> = new Map();\n  private marketplaceApps: Map<string, MarketplaceApp> = new Map();\n\n  constructor() {\n    this.seedData();\n  }\n\n  private seedData() {\n    // Create demo users\n    const demoUser: User = {\n      id: \"demo-user-id\",\n      username: \"demo\",\n      email: \"demo@mcpbuilder.com\",\n      password: \"demo123\", // In real app, this would be hashed\n      name: \"Sarah Johnson\",\n      plan: \"Professional\",\n      createdAt: new Date(),\n    };\n    this.users.set(demoUser.id, demoUser);\n\n    // Additional demo users for admin panel\n    const additionalUsers: User[] = [\n      {\n        id: \"user-2\",\n        username: \"john_dev\",\n        email: \"john@example.com\",\n        password: \"password123\",\n        name: \"John Smith\",\n        plan: \"Free\",\n        createdAt: new Date(\"2024-12-15\"),\n      },\n      {\n        id: \"user-3\",\n        username: \"alice_coder\",\n        email: \"alice@company.com\",\n        password: \"password123\",\n        name: \"Alice Cooper\",\n        plan: \"Professional\",\n        createdAt: new Date(\"2024-12-14\"),\n      },\n      {\n        id: \"user-4\",\n        username: \"mike_startup\",\n        email: \"mike@startup.io\",\n        password: \"password123\",\n        name: \"Mike Wilson\",\n        plan: \"Enterprise\",\n        createdAt: new Date(\"2024-12-13\"),\n      },\n      {\n        id: \"user-5\",\n        username: \"emma_designer\",\n        email: \"emma@design.co\",\n        password: \"password123\",\n        name: \"Emma Brown\",\n        plan: \"Professional\",\n        createdAt: new Date(\"2024-12-12\"),\n      },\n    ];\n    additionalUsers.forEach(user => this.users.set(user.id, user));\n\n    // Create demo projects\n    const projects: Project[] = [\n      {\n        id: \"project-1\",\n        userId: demoUser.id,\n        name: \"Restaurant App\",\n        description: \"Complete restaurant management system with online ordering\",\n        prompt: \"Create a comprehensive restaurant management application with menu management, order processing, table reservations, and staff dashboard\",\n        status: \"completed\",\n        llm: \"claude\",\n        mcpServers: [\"database\", \"api\", \"payment\"],\n        files: [\n          { name: \"Knowledge Article 1\", size: \"2.4kb\", type: \"markdown\" },\n          { name: \"Knowledge Article 2\", size: \"8.1kb\", type: \"markdown\" },\n          { name: \"Knowledge Article 3\", size: \"3.2kb\", type: \"markdown\" },\n          { name: \"Knowledge Article 4\", size: \"5.7kb\", type: \"markdown\" },\n          { name: \"Knowledge Article 5\", size: \"4.8kb\", type: \"markdown\" },\n        ],\n        revenue: 4500, // $45.00\n        revenueGrowth: 18,\n        published: \"true\",\n        createdAt: new Date(\"2024-12-18\"),\n      },\n      {\n        id: \"project-2\",\n        userId: demoUser.id,\n        name: \"E-commerce Store\",\n        description: \"Modern e-commerce platform with cart and payments\",\n        prompt: \"Build a complete e-commerce store with product catalog, shopping cart, payment processing, and order management\",\n        status: \"completed\",\n        llm: \"claude\",\n        mcpServers: [\"database\", \"api\", \"payment\"],\n        files: [\n          { name: \"Knowledge Article 1\", size: \"15.7kb\", type: \"markdown\" },\n          { name: \"Knowledge Article 2\", size: \"9.3kb\", type: \"markdown\" },\n          { name: \"Knowledge Article 3\", size: \"7.2kb\", type: \"markdown\" },\n          { name: \"Knowledge Article 4\", size: \"6.8kb\", type: \"markdown\" },\n          { name: \"Knowledge Article 5\", size: \"11.4kb\", type: \"markdown\" },\n        ],\n        revenue: 7250, // $72.50\n        revenueGrowth: 25,\n        published: \"true\",\n        createdAt: new Date(\"2024-12-17\"),\n      },\n      {\n        id: \"project-3\",\n        userId: demoUser.id,\n        name: \"Blog Platform\",\n        description: \"Personal blog with content management\",\n        prompt: \"Create a modern blog platform with content editor, categories, comments, and SEO optimization\",\n        status: \"completed\",\n        llm: \"gemini\",\n        mcpServers: [\"database\", \"api\", \"auth\"],\n        files: [\n          { name: \"Knowledge Article 1\", size: \"12.3kb\", type: \"markdown\" },\n          { name: \"Knowledge Article 2\", size: \"8.9kb\", type: \"markdown\" },\n          { name: \"Knowledge Article 3\", size: \"5.4kb\", type: \"markdown\" },\n          { name: \"Knowledge Article 4\", size: \"6.7kb\", type: \"markdown\" },\n        ],\n        revenue: 3200, // $32.00\n        revenueGrowth: 12,\n        published: \"false\",\n        createdAt: new Date(\"2024-12-16\"),\n      },\n      {\n        id: \"project-4\",\n        userId: demoUser.id,\n        name: \"Fitness Tracker\",\n        description: \"Personal fitness and workout tracking app\",\n        prompt: \"Build a fitness tracking application with workout plans, progress tracking, and health metrics\",\n        status: \"testing\",\n        llm: \"claude\",\n        mcpServers: [\"database\", \"api\"],\n        files: [\n          { name: \"Knowledge Article 1\", size: \"18.2kb\", type: \"markdown\" },\n          { name: \"Knowledge Article 2\", size: \"14.5kb\", type: \"markdown\" },\n          { name: \"Knowledge Article 3\", size: \"7.3kb\", type: \"markdown\" },\n        ],\n        revenue: 0,\n        revenueGrowth: 0,\n        published: \"false\",\n        createdAt: new Date(\"2024-12-15\"),\n      },\n      {\n        id: \"project-5\",\n        userId: demoUser.id,\n        name: \"Task Manager\",\n        description: \"Team collaboration and project management tool\",\n        prompt: \"Create a task management application with team collaboration, project boards, and deadline tracking\",\n        status: \"development\",\n        llm: \"llama\",\n        mcpServers: [\"database\", \"api\", \"auth\"],\n        files: [\n          { name: \"Knowledge Article 1\", size: \"16.8kb\", type: \"markdown\" },\n          { name: \"Knowledge Article 2\", size: \"9.6kb\", type: \"markdown\" },\n          { name: \"Knowledge Article 3\", size: \"3.9kb\", type: \"markdown\" },\n        ],\n        revenue: 0,\n        revenueGrowth: 0,\n        published: \"false\",\n        createdAt: new Date(\"2024-12-14\"),\n      },\n    ];\n\n    projects.forEach(project => this.projects.set(project.id, project));\n\n    // Create demo MCP servers\n    const servers: McpServer[] = [\n      {\n        id: \"server-1\",\n        userId: demoUser.id,\n        name: \"Database MCP\",\n        type: \"sse\",\n        url: \"wss://db.mcpbuilder.com\",\n        description: \"Real-time DB connections\",\n        status: \"connected\",\n        latency: 45,\n        createdAt: new Date(),\n      },\n      {\n        id: \"server-2\",\n        userId: demoUser.id,\n        name: \"API Gateway\",\n        type: \"sse\",\n        url: \"wss://api.mcpbuilder.com\",\n        description: \"REST & GraphQL integrations\",\n        status: \"connected\",\n        latency: 32,\n        createdAt: new Date(),\n      },\n      {\n        id: \"server-3\",\n        userId: demoUser.id,\n        name: \"Auth MCP\",\n        type: \"stdio\",\n        url: \"\",\n        description: \"User auth & authorization\",\n        status: \"connected\",\n        latency: 28,\n        createdAt: new Date(),\n      },\n    ];\n\n    servers.forEach(server => this.mcpServers.set(server.id, server));\n\n    // Create demo marketplace apps\n    const marketplaceApps: MarketplaceApp[] = [\n      {\n        id: \"app-1\",\n        projectId: \"project-1\",\n        name: \"E-commerce Store\",\n        description: \"Complete e-commerce solution\",\n        price: 4900, // $49.00\n        rating: \"4.8\",\n        downloads: 1200,\n        category: \"business\",\n        icon: \"⚡\",\n        createdAt: new Date(),\n      },\n      {\n        id: \"app-2\",\n        projectId: \"project-2\",\n        name: \"Blog Platform\",\n        description: \"Modern blogging platform\",\n        price: 2900, // $29.00\n        rating: \"4.6\",\n        downloads: 890,\n        category: \"content\",\n        icon: \"📊\",\n        createdAt: new Date(),\n      },\n      {\n        id: \"app-3\",\n        projectId: \"project-3\",\n        name: \"Booking System\",\n        description: \"Appointment booking system\",\n        price: 3900, // $39.00\n        rating: \"4.9\",\n        downloads: 2100,\n        category: \"service\",\n        icon: \"💬\",\n        createdAt: new Date(),\n      },\n    ];\n\n    marketplaceApps.forEach(app => this.marketplaceApps.set(app.id, app));\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id, \n      plan: insertUser.plan || \"free\",\n      createdAt: new Date() \n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    return this.users.delete(id);\n  }\n\n  // Projects\n  async getProjects(userId: string): Promise<Project[]> {\n    return Array.from(this.projects.values()).filter(project => project.userId === userId);\n  }\n\n  async getProject(id: string): Promise<Project | undefined> {\n    return this.projects.get(id);\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const id = randomUUID();\n    const project: Project = { \n      ...insertProject, \n      id, \n      description: insertProject.description || null,\n      status: insertProject.status || \"development\",\n      mcpServers: Array.isArray(insertProject.mcpServers) ? insertProject.mcpServers : [],\n      files: Array.isArray(insertProject.files) ? insertProject.files : [],\n      revenue: insertProject.revenue || 0,\n      revenueGrowth: insertProject.revenueGrowth || 0,\n      published: insertProject.published || \"false\",\n      createdAt: new Date() \n    };\n    this.projects.set(id, project);\n    return project;\n  }\n\n  async updateProject(id: string, updates: Partial<Project>): Promise<Project | undefined> {\n    const project = this.projects.get(id);\n    if (!project) return undefined;\n    \n    const updatedProject = { ...project, ...updates };\n    this.projects.set(id, updatedProject);\n    return updatedProject;\n  }\n\n  // MCP Servers\n  async getMcpServers(userId: string): Promise<McpServer[]> {\n    return Array.from(this.mcpServers.values()).filter(server => server.userId === userId);\n  }\n\n  async getMcpServer(id: string): Promise<McpServer | undefined> {\n    return this.mcpServers.get(id);\n  }\n\n  async createMcpServer(insertServer: InsertMcpServer): Promise<McpServer> {\n    const id = randomUUID();\n    const server: McpServer = { \n      ...insertServer, \n      id, \n      type: insertServer.type || \"sse\",\n      url: insertServer.url || null,\n      description: insertServer.description || null,\n      status: insertServer.status || \"disconnected\",\n      latency: insertServer.latency || 0,\n      createdAt: new Date() \n    };\n    this.mcpServers.set(id, server);\n    return server;\n  }\n\n  async updateMcpServer(id: string, updates: Partial<McpServer>): Promise<McpServer | undefined> {\n    const server = this.mcpServers.get(id);\n    if (!server) return undefined;\n    \n    const updatedServer = { ...server, ...updates };\n    this.mcpServers.set(id, updatedServer);\n    return updatedServer;\n  }\n\n  async deleteMcpServer(id: string): Promise<boolean> {\n    return this.mcpServers.delete(id);\n  }\n\n  // Chat Messages\n  async getChatMessages(userId: string): Promise<ChatMessage[]> {\n    return Array.from(this.chatMessages.values())\n      .filter(message => message.userId === userId)\n      .sort((a, b) => (a.createdAt?.getTime() || 0) - (b.createdAt?.getTime() || 0));\n  }\n\n  async createChatMessage(insertMessage: InsertChatMessage): Promise<ChatMessage> {\n    const id = randomUUID();\n    const message: ChatMessage = { \n      ...insertMessage, \n      id, \n      createdAt: new Date() \n    };\n    this.chatMessages.set(id, message);\n    return message;\n  }\n\n  // Marketplace Apps\n  async getMarketplaceApps(): Promise<MarketplaceApp[]> {\n    return Array.from(this.marketplaceApps.values());\n  }\n\n  async getMarketplaceApp(id: string): Promise<MarketplaceApp | undefined> {\n    return this.marketplaceApps.get(id);\n  }\n\n  async createMarketplaceApp(insertApp: InsertMarketplaceApp): Promise<MarketplaceApp> {\n    const id = randomUUID();\n    const app: MarketplaceApp = { \n      ...insertApp, \n      id, \n      description: insertApp.description || null,\n      rating: insertApp.rating || \"0\",\n      downloads: insertApp.downloads || 0,\n      category: insertApp.category || \"custom\",\n      icon: insertApp.icon || \"🔧\",\n      createdAt: new Date() \n    };\n    this.marketplaceApps.set(id, app);\n    return app;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":14822},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  plan: text(\"plan\").notNull().default(\"free\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  prompt: text(\"prompt\").notNull(),\n  status: text(\"status\").notNull().default(\"development\"), // development, testing, completed\n  llm: text(\"llm\").notNull(), // claude, gemini, llama, gpt4\n  mcpServers: jsonb(\"mcp_servers\").$type<string[]>().notNull().default([]),\n  files: jsonb(\"files\").$type<{name: string, size: string, type: string}[]>().default([]),\n  revenue: integer(\"revenue\").default(0), // in cents\n  revenueGrowth: integer(\"revenue_growth\").default(0), // percentage\n  published: text(\"published\").default(\"false\"), // \"true\" or \"false\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const mcpServers = pgTable(\"mcp_servers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull().default(\"sse\"), // sse, stdio, http, websocket, grpc\n  url: text(\"url\"),\n  description: text(\"description\"),\n  status: text(\"status\").notNull().default(\"disconnected\"), // connected, disconnected\n  latency: integer(\"latency\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  sender: text(\"sender\").notNull(), // user, ai\n  message: text(\"message\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const marketplaceApps = pgTable(\"marketplace_apps\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  price: integer(\"price\").notNull(), // in cents\n  rating: text(\"rating\").notNull().default(\"0\"),\n  downloads: integer(\"downloads\").default(0),\n  category: text(\"category\").notNull().default(\"custom\"),\n  icon: text(\"icon\").notNull().default(\"🔧\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMcpServerSchema = createInsertSchema(mcpServers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMarketplaceAppSchema = createInsertSchema(marketplaceApps).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Project = typeof projects.$inferSelect;\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\n\nexport type McpServer = typeof mcpServers.$inferSelect;\nexport type InsertMcpServer = z.infer<typeof insertMcpServerSchema>;\n\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\n\nexport type MarketplaceApp = typeof marketplaceApps.$inferSelect;\nexport type InsertMarketplaceApp = z.infer<typeof insertMarketplaceAppSchema>;\n","size_bytes":4087},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/lib/auth\";\n\nimport LoginPage from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport ChatDevelopment from \"@/pages/chat-development\";\nimport Projects from \"@/pages/projects\";\nimport MCPServers from \"@/pages/mcp-servers\";\nimport Marketplace from \"@/pages/marketplace\";\nimport Analytics from \"@/pages/analytics\";\nimport Billing from \"@/pages/billing\";\nimport Admin from \"@/pages/admin\";\nimport MainLayout from \"@/components/layout/main-layout\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction ProtectedRoute({ component: Component }: { component: React.ComponentType }) {\n  const { isAuthenticated } = useAuth();\n  \n  if (!isAuthenticated) {\n    return <LoginPage />;\n  }\n  \n  return (\n    <MainLayout>\n      <Component />\n    </MainLayout>\n  );\n}\n\nfunction Router() {\n  const { isAuthenticated } = useAuth();\n  \n  return (\n    <Switch>\n      <Route path=\"/\" component={() => isAuthenticated ? <ProtectedRoute component={Dashboard} /> : <LoginPage />} />\n      <Route path=\"/dashboard\" component={() => <ProtectedRoute component={Dashboard} />} />\n      <Route path=\"/chat\" component={() => <ProtectedRoute component={ChatDevelopment} />} />\n      <Route path=\"/projects\" component={() => <ProtectedRoute component={Projects} />} />\n      <Route path=\"/servers\" component={() => <ProtectedRoute component={MCPServers} />} />\n      <Route path=\"/marketplace\" component={() => <ProtectedRoute component={Marketplace} />} />\n      <Route path=\"/analytics\" component={() => <ProtectedRoute component={Analytics} />} />\n      <Route path=\"/billing\" component={() => <ProtectedRoute component={Billing} />} />\n      <Route path=\"/admin\" component={() => <ProtectedRoute component={Admin} />} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2271},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(217.2 91.2% 59.8%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 40% 98%);\n  --secondary-foreground: hsl(222.2 84% 4.9%);\n  --muted: hsl(210 40% 98%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(210 40% 98%);\n  --accent-foreground: hsl(222.2 84% 4.9%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(217.2 91.2% 59.8%);\n  --chart-1: hsl(12 76% 61%);\n  --chart-2: hsl(173 58% 39%);\n  --chart-3: hsl(197 37% 24%);\n  --chart-4: hsl(43 74% 66%);\n  --chart-5: hsl(27 87% 67%);\n  --radius: 0.5rem;\n  \n  /* MCP Builder Brand Colors */\n  --brand-blue: hsl(217.2 91.2% 59.8%);\n  --brand-emerald: hsl(160 84% 39%);\n  --brand-amber: hsl(43 96% 56%);\n  --brand-slate: hsl(215 28% 17%);\n  --brand-gray: hsl(220 13% 91%);\n  \n  /* Gradients */\n  --gradient-brand: linear-gradient(135deg, var(--brand-blue), hsl(224 92% 53%));\n  --gradient-bg: linear-gradient(135deg, hsl(214 100% 97%), hsl(220 100% 96%));\n  \n  /* Font families */\n  --font-sans: 'Inter', system-ui, sans-serif;\n}\n\n.dark {\n  --background: hsl(222.2 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222.2 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222.2 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(217.2 91.2% 59.8%);\n  --primary-foreground: hsl(222.2 84% 4.9%);\n  --secondary: hsl(217.2 32.6% 17.5%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217.2 32.6% 17.5%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(217.2 32.6% 17.5%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217.2 32.6% 17.5%);\n  --input: hsl(217.2 32.6% 17.5%);\n  --ring: hsl(217.2 91.2% 59.8%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n@layer components {\n  .gradient-brand {\n    background: var(--gradient-brand);\n  }\n  \n  .gradient-bg {\n    background: var(--gradient-bg);\n  }\n  \n  .sidebar-active {\n    @apply bg-slate-800;\n  }\n  \n  .status-completed {\n    @apply bg-green-100 text-green-800;\n  }\n  \n  .status-testing {\n    @apply bg-blue-100 text-blue-800;\n  }\n  \n  .status-development {\n    @apply bg-orange-100 text-orange-800;\n  }\n  \n  .server-connected {\n    @apply text-green-600;\n  }\n  \n  .server-disconnected {\n    @apply text-red-600;\n  }\n}\n","size_bytes":2822},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { create } from 'zustand';\nimport { type User } from '@shared/schema';\n\ninterface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n  login: (user: User) => void;\n  logout: () => void;\n}\n\nexport const useAuth = create<AuthState>()((set) => ({\n  user: null,\n  isAuthenticated: false,\n  login: (user: User) => set({ user, isAuthenticated: true }),\n  logout: () => set({ user: null, isAuthenticated: false }),\n}));\n","size_bytes":430},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { type User } from \"@shared/schema\";\nimport { \n  Users, \n  FolderOpen, \n  DollarSign, \n  Activity, \n  Wifi, \n  AlertTriangle,\n  TrendingUp,\n  Database,\n  Search,\n  Edit2,\n  Trash2,\n  MoreHorizontal,\n  UserCheck,\n  UserX\n} from \"lucide-react\";\n\nexport default function Admin() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedPlan, setSelectedPlan] = useState<string>(\"all\");\n\n  const platformStats = {\n    totalUsers: 127,\n    activeProjects: 89,\n    revenue: 12450,\n    monthlyGrowth: 23.5,\n  };\n\n  const systemHealth = {\n    serverUptime: 99.9,\n    activeConnections: 245,\n    pendingReviews: 3,\n    databaseHealth: \"Excellent\",\n  };\n\n  // Fetch all users for admin panel\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/users\");\n      return response.json();\n    },\n  });\n\n  // User management mutations\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ userId, updates }: { userId: string; updates: Partial<User> }) => {\n      return apiRequest(\"PATCH\", `/api/admin/users/${userId}`, updates);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"User Updated\",\n        description: \"User information has been updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Update Failed\",\n        description: \"Failed to update user information.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return apiRequest(\"DELETE\", `/api/admin/users/${userId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"User Deleted\",\n        description: \"User has been removed from the platform.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Delete Failed\",\n        description: \"Failed to delete user.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filter users based on search and plan\n  const filteredUsers = users.filter((user) => {\n    const matchesSearch = user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         user.username.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesPlan = selectedPlan === \"all\" || user.plan.toLowerCase() === selectedPlan.toLowerCase();\n    return matchesSearch && matchesPlan;\n  });\n\n  const handlePlanChange = (userId: string, newPlan: string) => {\n    updateUserMutation.mutate({ userId, updates: { plan: newPlan } });\n  };\n\n  const handleDeleteUser = (userId: string) => {\n    if (confirm(\"Are you sure you want to delete this user? This action cannot be undone.\")) {\n      deleteUserMutation.mutate(userId);\n    }\n  };\n\n  const getPlanBadgeColor = (plan: string) => {\n    switch (plan.toLowerCase()) {\n      case \"enterprise\":\n        return \"bg-purple-100 text-purple-800\";\n      case \"professional\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"free\":\n        return \"bg-gray-100 text-gray-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-bold text-gray-900\">Admin Panel</h2>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Platform Statistics */}\n        <Card className=\"shadow-sm border border-gray-100\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center mb-4\">\n              <TrendingUp className=\"mr-3 text-blue-600\" size={24} />\n              <h3 className=\"text-lg font-semibold text-gray-900\">Platform Stats</h3>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <Users size={20} className=\"mr-3 text-gray-400\" />\n                  <span className=\"text-gray-600\">Total Users</span>\n                </div>\n                <span className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-total-users\">\n                  {platformStats.totalUsers}\n                </span>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <FolderOpen size={20} className=\"mr-3 text-gray-400\" />\n                  <span className=\"text-gray-600\">Active Projects</span>\n                </div>\n                <span className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-active-projects\">\n                  {platformStats.activeProjects}\n                </span>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <DollarSign size={20} className=\"mr-3 text-gray-400\" />\n                  <span className=\"text-gray-600\">Monthly Revenue</span>\n                </div>\n                <span className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-revenue\">\n                  ${platformStats.revenue.toLocaleString()}\n                </span>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <TrendingUp size={20} className=\"mr-3 text-gray-400\" />\n                  <span className=\"text-gray-600\">Growth Rate</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <span className=\"text-2xl font-bold text-green-600\">\n                    +{platformStats.monthlyGrowth}%\n                  </span>\n                  <Badge className=\"ml-2 bg-green-100 text-green-800\">\n                    This Month\n                  </Badge>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* System Health */}\n        <Card className=\"shadow-sm border border-gray-100\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center mb-4\">\n              <Activity className=\"mr-3 text-green-600\" size={24} />\n              <h3 className=\"text-lg font-semibold text-gray-900\">System Health</h3>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <Wifi size={20} className=\"mr-3 text-gray-400\" />\n                  <span className=\"text-gray-600\">Server Uptime</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <span className=\"text-lg font-semibold text-green-600\">\n                    {systemHealth.serverUptime}%\n                  </span>\n                  <span className=\"ml-2 text-green-600\">🟢</span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <Users size={20} className=\"mr-3 text-gray-400\" />\n                  <span className=\"text-gray-600\">Active Connections</span>\n                </div>\n                <span className=\"text-2xl font-bold text-gray-900\">\n                  {systemHealth.activeConnections}\n                </span>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <AlertTriangle size={20} className=\"mr-3 text-gray-400\" />\n                  <span className=\"text-gray-600\">Pending Reviews</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <span className=\"text-lg font-semibold text-orange-600\">\n                    {systemHealth.pendingReviews}\n                  </span>\n                  <span className=\"ml-2 text-orange-600\">⚠️</span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <Database size={20} className=\"mr-3 text-gray-400\" />\n                  <span className=\"text-gray-600\">Database Health</span>\n                </div>\n                <Badge className=\"bg-green-100 text-green-800\">\n                  {systemHealth.databaseHealth}\n                </Badge>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* User Management */}\n      <Card className=\"shadow-sm border border-gray-100\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">User Management</h3>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                <Search size={16} className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n                <Input\n                  placeholder=\"Search users...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-9 w-64\"\n                  data-testid=\"input-search-users\"\n                />\n              </div>\n              <Select value={selectedPlan} onValueChange={setSelectedPlan}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Plans</SelectItem>\n                  <SelectItem value=\"free\">Free</SelectItem>\n                  <SelectItem value=\"professional\">Professional</SelectItem>\n                  <SelectItem value=\"enterprise\">Enterprise</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"rounded-lg border border-gray-200 overflow-hidden\">\n            <Table>\n              <TableHeader>\n                <TableRow className=\"bg-gray-50\">\n                  <TableHead className=\"font-semibold\">User</TableHead>\n                  <TableHead className=\"font-semibold\">Email</TableHead>\n                  <TableHead className=\"font-semibold\">Plan</TableHead>\n                  <TableHead className=\"font-semibold\">Joined</TableHead>\n                  <TableHead className=\"font-semibold\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredUsers.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={5} className=\"text-center py-8 text-gray-500\">\n                      {searchTerm || selectedPlan !== \"all\" ? \"No users found matching the criteria\" : \"No users found\"}\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredUsers.map((user) => (\n                    <TableRow key={user.id} className=\"hover:bg-gray-50\">\n                      <TableCell>\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white text-sm font-medium\">\n                            {user.name.split(' ').map((n: string) => n[0]).join('')}\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-gray-900\">{user.name}</p>\n                            <p className=\"text-sm text-gray-500\">@{user.username}</p>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"text-gray-600\">{user.email}</TableCell>\n                      <TableCell>\n                        <Select \n                          value={user.plan} \n                          onValueChange={(value) => handlePlanChange(user.id, value)}\n                          disabled={updateUserMutation.isPending}\n                        >\n                          <SelectTrigger className=\"w-32\">\n                            <SelectValue>\n                              <Badge className={getPlanBadgeColor(user.plan)}>\n                                {user.plan}\n                              </Badge>\n                            </SelectValue>\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"Free\">Free</SelectItem>\n                            <SelectItem value=\"Professional\">Professional</SelectItem>\n                            <SelectItem value=\"Enterprise\">Enterprise</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </TableCell>\n                      <TableCell className=\"text-gray-600\">\n                        {user.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'Unknown'}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              toast({\n                                title: \"Edit User\",\n                                description: \"User editing functionality would open here.\",\n                              });\n                            }}\n                            data-testid={`button-edit-user-${user.id}`}\n                          >\n                            <Edit2 size={14} />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteUser(user.id)}\n                            disabled={deleteUserMutation.isPending || user.id === \"demo-user-id\"}\n                            data-testid={`button-delete-user-${user.id}`}\n                          >\n                            <Trash2 size={14} />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n\n          {filteredUsers.length > 0 && (\n            <div className=\"mt-4 flex items-center justify-between text-sm text-gray-600\">\n              <p>Showing {filteredUsers.length} of {users.length} users</p>\n              <div className=\"flex items-center space-x-4\">\n                <span>Total Active: {users.filter(u => u.plan !== \"Free\").length}</span>\n                <span>Free Users: {users.filter(u => u.plan === \"Free\").length}</span>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Recent Activity */}\n      <Card className=\"shadow-sm border border-gray-100\">\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Recent Activity</h3>\n          \n          <div className=\"space-y-3\">\n            {[\n              {\n                time: \"2 minutes ago\",\n                action: \"New user registration\",\n                details: \"sarah.wilson@example.com joined the platform\",\n                type: \"user\",\n              },\n              {\n                time: \"15 minutes ago\",\n                action: \"Project deployed to marketplace\",\n                details: \"Restaurant POS System by john.doe\",\n                type: \"deployment\",\n              },\n              {\n                time: \"1 hour ago\",\n                action: \"MCP server connected\",\n                details: \"Payment Gateway server established connection\",\n                type: \"server\",\n              },\n              {\n                time: \"3 hours ago\",\n                action: \"Subscription upgrade\",\n                details: \"User upgraded to Professional plan\",\n                type: \"billing\",\n              },\n            ].map((activity, index) => (\n              <div key={index} className=\"flex items-start space-x-3 py-3 border-b border-gray-100 last:border-b-0\">\n                <div className={`w-2 h-2 rounded-full mt-2 ${\n                  activity.type === \"user\" ? \"bg-blue-500\" :\n                  activity.type === \"deployment\" ? \"bg-green-500\" :\n                  activity.type === \"server\" ? \"bg-purple-500\" :\n                  \"bg-orange-500\"\n                }`} />\n                <div className=\"flex-1\">\n                  <p className=\"font-medium text-gray-900\">{activity.action}</p>\n                  <p className=\"text-sm text-gray-600\">{activity.details}</p>\n                  <p className=\"text-xs text-gray-500 mt-1\">{activity.time}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":17877},"client/src/pages/analytics.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, AreaChart, Area } from \"recharts\";\nimport { DollarSign, TrendingUp, Users, Server, Activity, Eye, MessageSquare, Download } from \"lucide-react\";\n\n// Dummy data for analytics\nconst revenueData = [\n  { month: \"Jul\", revenue: 2400, growth: 12 },\n  { month: \"Aug\", revenue: 2800, growth: 16.7 },\n  { month: \"Sep\", revenue: 3200, growth: 14.3 },\n  { month: \"Oct\", revenue: 3800, growth: 18.8 },\n  { month: \"Nov\", revenue: 4200, growth: 10.5 },\n  { month: \"Dec\", revenue: 4950, growth: 17.9 },\n];\n\nconst userEngagementData = [\n  { day: \"Mon\", activeUsers: 245, sessions: 890, pageViews: 2340 },\n  { day: \"Tue\", activeUsers: 289, sessions: 980, pageViews: 2680 },\n  { day: \"Wed\", activeUsers: 356, sessions: 1120, pageViews: 3120 },\n  { day: \"Thu\", activeUsers: 298, sessions: 1050, pageViews: 2890 },\n  { day: \"Fri\", activeUsers: 412, sessions: 1340, pageViews: 3560 },\n  { day: \"Sat\", activeUsers: 378, sessions: 1200, pageViews: 3200 },\n  { day: \"Sun\", activeUsers: 320, sessions: 980, pageViews: 2750 },\n];\n\nconst serverMetricsData = [\n  { time: \"00:00\", latency: 32, uptime: 99.9, connections: 145 },\n  { time: \"04:00\", latency: 28, uptime: 99.8, connections: 120 },\n  { time: \"08:00\", latency: 45, uptime: 99.9, connections: 280 },\n  { time: \"12:00\", latency: 52, uptime: 99.7, connections: 340 },\n  { time: \"16:00\", latency: 38, uptime: 99.9, connections: 295 },\n  { time: \"20:00\", latency: 42, uptime: 99.8, connections: 220 },\n];\n\nconst appPerformanceData = [\n  { app: \"Restaurant App\", downloads: 1240, ratings: 4.8, revenue: 4500 },\n  { app: \"E-commerce Store\", downloads: 890, ratings: 4.6, revenue: 7250 },\n  { app: \"Blog Platform\", downloads: 2100, ratings: 4.9, revenue: 3200 },\n  { app: \"Fitness Tracker\", downloads: 750, ratings: 4.7, revenue: 0 },\n  { app: \"Task Manager\", downloads: 620, ratings: 4.5, revenue: 0 },\n];\n\nexport default function Analytics() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-3xl font-bold text-gray-900\">Analytics Dashboard</h2>\n        <div className=\"text-sm text-gray-500\">\n          Real-time data • Last updated: {new Date().toLocaleTimeString()}\n        </div>\n      </div>\n      \n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"shadow-sm border border-gray-100\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Total Revenue</p>\n                <p className=\"text-2xl font-bold text-gray-900\">$149.50</p>\n                <p className=\"text-sm text-green-600 flex items-center mt-1\">\n                  <TrendingUp size={14} className=\"mr-1\" />\n                  +17.9% this month\n                </p>\n              </div>\n              <div className=\"bg-green-100 p-3 rounded-full\">\n                <DollarSign className=\"text-green-600\" size={20} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-sm border border-gray-100\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Active Users</p>\n                <p className=\"text-2xl font-bold text-gray-900\">2,847</p>\n                <p className=\"text-sm text-blue-600 flex items-center mt-1\">\n                  <Users size={14} className=\"mr-1\" />\n                  +8.3% from last week\n                </p>\n              </div>\n              <div className=\"bg-blue-100 p-3 rounded-full\">\n                <Users className=\"text-blue-600\" size={20} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-sm border border-gray-100\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Server Uptime</p>\n                <p className=\"text-2xl font-bold text-gray-900\">99.8%</p>\n                <p className=\"text-sm text-green-600 flex items-center mt-1\">\n                  <Activity size={14} className=\"mr-1\" />\n                  Excellent performance\n                </p>\n              </div>\n              <div className=\"bg-purple-100 p-3 rounded-full\">\n                <Server className=\"text-purple-600\" size={20} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-sm border border-gray-100\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">App Downloads</p>\n                <p className=\"text-2xl font-bold text-gray-900\">5,600</p>\n                <p className=\"text-sm text-orange-600 flex items-center mt-1\">\n                  <Download size={14} className=\"mr-1\" />\n                  +24.1% growth\n                </p>\n              </div>\n              <div className=\"bg-orange-100 p-3 rounded-full\">\n                <Download className=\"text-orange-600\" size={20} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts Section */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Revenue Trends */}\n        <Card className=\"shadow-sm border border-gray-100\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <DollarSign size={20} className=\"mr-2 text-green-600\" />\n              Revenue Trends\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <AreaChart data={revenueData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                <XAxis dataKey=\"month\" stroke=\"#6b7280\" fontSize={12} />\n                <YAxis stroke=\"#6b7280\" fontSize={12} />\n                <Tooltip \n                  contentStyle={{ \n                    backgroundColor: '#fff', \n                    border: '1px solid #e5e7eb',\n                    borderRadius: '8px',\n                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n                  }}\n                  formatter={(value, name) => [\n                    name === 'revenue' ? `$${(value as number / 100).toFixed(2)}` : `${value}%`,\n                    name === 'revenue' ? 'Revenue' : 'Growth'\n                  ]}\n                />\n                <Area \n                  type=\"monotone\" \n                  dataKey=\"revenue\" \n                  stroke=\"#10b981\" \n                  fill=\"#10b981\"\n                  fillOpacity={0.1}\n                  strokeWidth={2}\n                />\n              </AreaChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* User Engagement */}\n        <Card className=\"shadow-sm border border-gray-100\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Users size={20} className=\"mr-2 text-blue-600\" />\n              User Engagement\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={userEngagementData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                <XAxis dataKey=\"day\" stroke=\"#6b7280\" fontSize={12} />\n                <YAxis stroke=\"#6b7280\" fontSize={12} />\n                <Tooltip \n                  contentStyle={{ \n                    backgroundColor: '#fff', \n                    border: '1px solid #e5e7eb',\n                    borderRadius: '8px',\n                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n                  }}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"activeUsers\" \n                  stroke=\"#3b82f6\" \n                  strokeWidth={2}\n                  dot={{ fill: '#3b82f6', strokeWidth: 2, r: 4 }}\n                  name=\"Active Users\"\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"sessions\" \n                  stroke=\"#8b5cf6\" \n                  strokeWidth={2}\n                  dot={{ fill: '#8b5cf6', strokeWidth: 2, r: 4 }}\n                  name=\"Sessions\"\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Server Performance */}\n        <Card className=\"shadow-sm border border-gray-100\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Server size={20} className=\"mr-2 text-purple-600\" />\n              Server Performance\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={serverMetricsData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                <XAxis dataKey=\"time\" stroke=\"#6b7280\" fontSize={12} />\n                <YAxis stroke=\"#6b7280\" fontSize={12} />\n                <Tooltip \n                  contentStyle={{ \n                    backgroundColor: '#fff', \n                    border: '1px solid #e5e7eb',\n                    borderRadius: '8px',\n                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n                  }}\n                  formatter={(value, name) => [\n                    name === 'latency' ? `${value}ms` : \n                    name === 'uptime' ? `${value}%` : value,\n                    name === 'latency' ? 'Latency' : \n                    name === 'uptime' ? 'Uptime' : 'Connections'\n                  ]}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"latency\" \n                  stroke=\"#f59e0b\" \n                  strokeWidth={2}\n                  dot={{ fill: '#f59e0b', strokeWidth: 2, r: 4 }}\n                  name=\"Latency (ms)\"\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"connections\" \n                  stroke=\"#ef4444\" \n                  strokeWidth={2}\n                  dot={{ fill: '#ef4444', strokeWidth: 2, r: 4 }}\n                  name=\"Active Connections\"\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* App Performance Summary */}\n        <Card className=\"shadow-sm border border-gray-100\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Activity size={20} className=\"mr-2 text-orange-600\" />\n              App Performance Summary\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {appPerformanceData.map((app, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-gray-900\">{app.app}</p>\n                    <div className=\"flex items-center space-x-4 mt-1\">\n                      <span className=\"text-xs text-gray-600 flex items-center\">\n                        <Download size={12} className=\"mr-1\" />\n                        {app.downloads.toLocaleString()}\n                      </span>\n                      <span className=\"text-xs text-gray-600\">\n                        ⭐ {app.ratings}\n                      </span>\n                      {app.revenue > 0 && (\n                        <span className=\"text-xs text-green-600 font-medium\">\n                          ${(app.revenue / 100).toFixed(2)}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    {app.revenue > 0 ? (\n                      <span className=\"text-sm font-semibold text-green-600\">\n                        Published\n                      </span>\n                    ) : (\n                      <span className=\"text-sm text-gray-500\">\n                        In Development\n                      </span>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Insights */}\n      <Card className=\"shadow-sm border border-gray-100\">\n        <CardHeader>\n          <CardTitle>Key Insights & Recommendations</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n              <div className=\"flex items-center\">\n                <div className=\"bg-green-100 p-2 rounded-full mr-3\">\n                  <TrendingUp className=\"text-green-600\" size={16} />\n                </div>\n                <div>\n                  <p className=\"font-medium text-green-900\">Revenue Growth</p>\n                  <p className=\"text-sm text-green-700\">Your published apps are generating steady revenue with 17.9% month-over-month growth.</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n              <div className=\"flex items-center\">\n                <div className=\"bg-blue-100 p-2 rounded-full mr-3\">\n                  <Eye className=\"text-blue-600\" size={16} />\n                </div>\n                <div>\n                  <p className=\"font-medium text-blue-900\">User Engagement</p>\n                  <p className=\"text-sm text-blue-700\">High user engagement with average session duration of 8.5 minutes across all apps.</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4\">\n              <div className=\"flex items-center\">\n                <div className=\"bg-orange-100 p-2 rounded-full mr-3\">\n                  <MessageSquare className=\"text-orange-600\" size={16} />\n                </div>\n                <div>\n                  <p className=\"font-medium text-orange-900\">Optimization</p>\n                  <p className=\"text-sm text-orange-700\">Consider publishing your in-development apps to increase your revenue potential.</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":14844},"client/src/pages/billing.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useAuth } from \"@/lib/auth\";\nimport { CreditCard, CheckCircle } from \"lucide-react\";\n\nexport default function Billing() {\n  const { user } = useAuth();\n\n  const usageData = {\n    projects: { current: 3, limit: 25, percentage: 12 },\n    mcpConnections: { current: 5, limit: Infinity, percentage: 5 },\n    apiCalls: { current: 1200, limit: 10000, percentage: 12 },\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-bold text-gray-900\">Billing & Subscription</h2>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Current Plan */}\n        <Card className=\"shadow-sm border border-gray-100\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center mb-4\">\n              <CreditCard className=\"mr-3 text-blue-600\" size={24} />\n              <h3 className=\"text-lg font-semibold text-gray-900\">Current Plan</h3>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <h4 className=\"text-xl font-semibold text-gray-900\">{user?.plan || \"Professional\"}</h4>\n                <p className=\"text-3xl font-bold text-blue-600\">\n                  $79<span className=\"text-lg text-gray-600\">/month</span>\n                </p>\n                <p className=\"text-gray-600\">Billed monthly</p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center text-green-600\">\n                  <CheckCircle size={16} className=\"mr-2\" />\n                  <span className=\"text-sm\">25 Projects</span>\n                </div>\n                <div className=\"flex items-center text-green-600\">\n                  <CheckCircle size={16} className=\"mr-2\" />\n                  <span className=\"text-sm\">Unlimited MCP Connections</span>\n                </div>\n                <div className=\"flex items-center text-green-600\">\n                  <CheckCircle size={16} className=\"mr-2\" />\n                  <span className=\"text-sm\">10K API Calls/month</span>\n                </div>\n                <div className=\"flex items-center text-green-600\">\n                  <CheckCircle size={16} className=\"mr-2\" />\n                  <span className=\"text-sm\">Priority Support</span>\n                </div>\n              </div>\n\n              <Button className=\"w-full\" data-testid=\"button-change-plan\">\n                Change Plan\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Current Usage */}\n        <Card className=\"shadow-sm border border-gray-100\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Current Usage</h3>\n            \n            <div className=\"space-y-6\">\n              <div>\n                <div className=\"flex justify-between text-sm mb-2\">\n                  <span className=\"font-medium\">Projects</span>\n                  <span className=\"text-gray-600\">\n                    {usageData.projects.current}/{usageData.projects.limit}\n                  </span>\n                </div>\n                <Progress value={usageData.projects.percentage} className=\"h-2\" />\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  {usageData.projects.percentage}% of monthly limit\n                </p>\n              </div>\n\n              <div>\n                <div className=\"flex justify-between text-sm mb-2\">\n                  <span className=\"font-medium\">MCP Connections</span>\n                  <span className=\"text-gray-600\">\n                    {usageData.mcpConnections.current}/∞\n                  </span>\n                </div>\n                <Progress value={usageData.mcpConnections.percentage} className=\"h-2\" />\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  {usageData.mcpConnections.percentage}% capacity\n                </p>\n              </div>\n\n              <div>\n                <div className=\"flex justify-between text-sm mb-2\">\n                  <span className=\"font-medium\">API Calls</span>\n                  <span className=\"text-gray-600\">\n                    {usageData.apiCalls.current.toLocaleString()}/{usageData.apiCalls.limit.toLocaleString()}\n                  </span>\n                </div>\n                <Progress value={usageData.apiCalls.percentage} className=\"h-2\" />\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  {usageData.apiCalls.percentage}% of monthly limit\n                </p>\n              </div>\n            </div>\n\n            <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n              <p className=\"text-sm text-blue-800\">\n                <strong>Next billing date:</strong> January 15, 2025\n              </p>\n              <p className=\"text-sm text-blue-600 mt-1\">\n                Your subscription will automatically renew.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Billing History */}\n      <Card className=\"shadow-sm border border-gray-100\">\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Recent Invoices</h3>\n          \n          <div className=\"space-y-3\">\n            {[\n              { date: \"Dec 15, 2024\", amount: \"$79.00\", status: \"Paid\" },\n              { date: \"Nov 15, 2024\", amount: \"$79.00\", status: \"Paid\" },\n              { date: \"Oct 15, 2024\", amount: \"$79.00\", status: \"Paid\" },\n            ].map((invoice, index) => (\n              <div key={index} className=\"flex items-center justify-between py-3 border-b border-gray-100 last:border-b-0\">\n                <div>\n                  <p className=\"font-medium text-gray-900\">{invoice.date}</p>\n                  <p className=\"text-sm text-gray-600\">Professional Plan</p>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-medium text-gray-900\">{invoice.amount}</p>\n                  <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                    {invoice.status}\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6437},"client/src/pages/chat-development.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useAuth } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type ChatMessage, type Project, type McpServer } from \"@shared/schema\";\nimport { \n  Mic, \n  Paperclip, \n  Send, \n  User, \n  Bot,\n  Rocket,\n  CheckCircle,\n  Clock,\n  Loader2,\n  Monitor,\n  MessageSquare\n} from \"lucide-react\";\n\nexport default function ChatDevelopment() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const [chatInput, setChatInput] = useState(\"\");\n  const [appName, setAppName] = useState(\"\");\n  const [prompt, setPrompt] = useState(\"\");\n  const [selectedLLM, setSelectedLLM] = useState(\"llama\");\n  const [selectedServers, setSelectedServers] = useState<string[]>([\"database\", \"api\"]);\n  const [buildProgress, setBuildProgress] = useState<\"idle\" | \"building\" | \"completed\">(\"idle\");\n  const [selectedProject, setSelectedProject] = useState<string | null>(null);\n  const [appChatInput, setAppChatInput] = useState(\"\");\n  const [appChatMessages, setAppChatMessages] = useState<{id: string, sender: string, message: string}[]>([]);\n\n  // Fetch data\n  const { data: messages = [] } = useQuery<ChatMessage[]>({\n    queryKey: [\"/api/chat/messages\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/chat/messages?userId=${user?.id}`);\n      return response.json();\n    },\n    enabled: !!user?.id,\n    refetchInterval: 1000, // Poll for new messages\n  });\n\n  const { data: projects = [] } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/projects?userId=${user?.id}`);\n      return response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  const { data: servers = [] } = useQuery<McpServer[]>({\n    queryKey: [\"/api/mcp-servers\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/mcp-servers?userId=${user?.id}`);\n      return response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  // LLM options\n  const llmOptions = [\n    { value: \"claude\", label: \"Claude 3.7\" },\n    { value: \"gemini\", label: \"Gemini Pro\" },\n    { value: \"llama\", label: \"LLaMA 3.3\" },\n    { value: \"gpt4\", label: \"GPT-4\" },\n  ];\n\n  // Mutations\n  const sendMessageMutation = useMutation({\n    mutationFn: async (message: string) => {\n      return apiRequest(\"POST\", \"/api/chat/messages\", {\n        userId: user?.id,\n        sender: \"user\",\n        message,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/chat/messages\"] });\n    },\n  });\n\n  const createProjectMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/projects\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({\n        title: \"App Generated!\",\n        description: \"Your application has been created successfully.\",\n      });\n      // Reset form\n      setAppName(\"\");\n      setPrompt(\"\");\n      setBuildProgress(\"completed\");\n      setTimeout(() => setBuildProgress(\"idle\"), 3000);\n    },\n  });\n\n  // Auto-scroll to bottom of messages\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const handleSendMessage = async () => {\n    if (!chatInput.trim()) return;\n    \n    try {\n      await sendMessageMutation.mutateAsync(chatInput);\n      setChatInput(\"\");\n    } catch (error) {\n      toast({\n        title: \"Failed to send message\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleTransferPrompt = () => {\n    const lastAIMessage = messages\n      .filter(m => m.sender === \"ai\")\n      .pop();\n    \n    if (lastAIMessage) {\n      setPrompt(lastAIMessage.message);\n      toast({\n        title: \"Prompt Transferred\",\n        description: \"AI response has been transferred to the prompt area.\",\n      });\n    }\n  };\n\n  const handleSaveApp = async () => {\n    if (!appName.trim() || !prompt.trim() || selectedServers.length === 0) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setBuildProgress(\"building\");\n\n    try {\n      await createProjectMutation.mutateAsync({\n        userId: user?.id,\n        name: appName,\n        prompt: prompt,\n        llm: selectedLLM,\n        mcpServers: selectedServers,\n        status: \"development\",\n        files: [\n          { name: \"Knowledge Article 1\", size: \"12.4kb\", type: \"markdown\" },\n          { name: \"Knowledge Article 2\", size: \"3.2kb\", type: \"markdown\" },\n          { name: \"Knowledge Article 3\", size: \"2.1kb\", type: \"markdown\" },\n        ],\n      });\n    } catch (error) {\n      setBuildProgress(\"idle\");\n      toast({\n        title: \"Failed to create app\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const toggleServer = (serverId: string) => {\n    setSelectedServers(prev => \n      prev.includes(serverId) \n        ? prev.filter(id => id !== serverId)\n        : [...prev, serverId]\n    );\n  };\n\n  const getAppTypeResponses = (appType: string, question: string): string => {\n    const responses: Record<string, Record<string, string>> = {\n      \"Restaurant App\": {\n        \"what is today's menu\": \"Today's menu includes our signature dishes:\\n\\n🍝 Pasta Primavera - $18\\n🥗 Caesar Salad - $12\\n🍖 Grilled Ribeye - $32\\n🍤 Garlic Shrimp - $24\\n🍰 Tiramisu - $8\\n\\nWould you like to place an order or make a reservation?\",\n        \"menu\": \"Here's our full menu:\\n\\n**APPETIZERS**\\n• Bruschetta - $9\\n• Calamari - $12\\n\\n**MAINS**\\n• Pasta Primavera - $18\\n• Grilled Salmon - $28\\n• Ribeye Steak - $32\\n\\n**DESSERTS**\\n• Tiramisu - $8\\n• Gelato - $6\",\n        \"reservation\": \"I'd be happy to help with reservations! We have availability today from 6-9 PM. How many guests and what time would you prefer?\",\n        \"default\": \"Welcome to our restaurant! I can help you with our menu, reservations, or placing an order. What would you like to know?\"\n      },\n      \"E-commerce Store\": {\n        \"products\": \"Here are our featured products:\\n\\n📱 iPhone 15 Pro - $999\\n💻 MacBook Air - $1299\\n⌚ Apple Watch - $399\\n🎧 AirPods Pro - $249\\n\\nAll items come with free shipping and 30-day returns!\",\n        \"order\": \"To place an order, simply add items to your cart and proceed to checkout. We accept all major credit cards and PayPal.\",\n        \"shipping\": \"We offer free shipping on orders over $50. Standard delivery is 3-5 business days, or choose express delivery for next-day delivery.\",\n        \"default\": \"Welcome to our store! Browse our products, check your orders, or ask me about shipping and returns. How can I help you today?\"\n      },\n      \"Blog Platform\": {\n        \"posts\": \"Here are our latest blog posts:\\n\\n✍️ 'Getting Started with React' - Dec 18\\n🚀 'Web Performance Tips' - Dec 17\\n💡 'Design Trends 2025' - Dec 16\\n🔧 'JavaScript Best Practices' - Dec 15\\n\\nWhich topic interests you most?\",\n        \"write\": \"Ready to create a new post? I can help you with:\\n• Post ideas and topics\\n• SEO optimization\\n• Content structure\\n• Publishing schedule\\n\\nWhat would you like to write about?\",\n        \"default\": \"Welcome to our blog platform! I can help you discover content, create new posts, or manage your publications. What are you looking for?\"\n      },\n      \"Fitness Tracker\": {\n        \"workout\": \"Here's today's recommended workout:\\n\\n💪 **Upper Body Strength**\\n• Push-ups: 3 sets of 12\\n• Dumbbell rows: 3 sets of 10\\n• Shoulder press: 3 sets of 8\\n• Plank: 3 sets of 30s\\n\\nEstimated time: 45 minutes. Ready to start?\",\n        \"progress\": \"Your fitness progress this week:\\n\\n📊 Workouts completed: 4/5\\n🔥 Calories burned: 1,240\\n⏱️ Total workout time: 3h 20m\\n💪 Strength improved by 5%\\n\\nKeep up the great work!\",\n        \"default\": \"Hi there! I'm your fitness assistant. I can help you track workouts, monitor progress, plan exercises, and stay motivated. What's your fitness goal today?\"\n      },\n      \"Task Manager\": {\n        \"tasks\": \"Here are your current tasks:\\n\\n✅ **Completed:**\\n• Review project proposal\\n• Team standup meeting\\n\\n📋 **In Progress:**\\n• Update documentation\\n• Code review for feature X\\n\\n⏰ **Pending:**\\n• Schedule client call\\n• Prepare presentation\",\n        \"project\": \"Your active projects:\\n\\n🚀 **Website Redesign** (75% complete)\\n👥 **Team Onboarding** (40% complete)\\n📱 **Mobile App** (90% complete)\\n\\nWhich project would you like to focus on?\",\n        \"default\": \"Welcome to your task manager! I can help you organize tasks, track project progress, collaborate with your team, and meet deadlines. What do you need to accomplish today?\"\n      }\n    };\n\n    const appResponses = responses[appType] || {};\n    const questionLower = question.toLowerCase();\n    \n    for (const [key, response] of Object.entries(appResponses)) {\n      if (questionLower.includes(key)) {\n        return response;\n      }\n    }\n    \n    return appResponses.default || \"I'm here to help! What would you like to know about this app?\";\n  };\n\n  const handleAppChatSend = () => {\n    if (!appChatInput.trim() || !selectedProject) return;\n    \n    const selectedProjectData = projects.find(p => p.id === selectedProject);\n    if (!selectedProjectData) return;\n\n    const userMessage = {\n      id: `msg-${Date.now()}-user`,\n      sender: \"user\",\n      message: appChatInput\n    };\n\n    const aiResponse = {\n      id: `msg-${Date.now()}-ai`,\n      sender: \"ai\", \n      message: getAppTypeResponses(selectedProjectData.name, appChatInput)\n    };\n\n    setAppChatMessages(prev => [...prev, userMessage, aiResponse]);\n    setAppChatInput(\"\");\n  };\n\n  return (\n    <div className=\"flex flex-col h-[calc(100vh-8rem)] space-y-4\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 flex-1 min-h-0\">\n        {/* Main Chat Area */}\n        <div className=\"lg:col-span-2 flex flex-col space-y-4 min-h-0\">\n          {/* Chat Messages */}\n          <Card className=\"flex-1 shadow-sm border border-gray-100 min-h-0\">\n            <CardContent className=\"p-6 h-full overflow-y-auto\">\n              <div className=\"space-y-4\">\n                {messages.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <Bot size={48} className=\"mx-auto text-gray-400 mb-4\" />\n                    <p className=\"text-gray-500\">Start a conversation to develop your app</p>\n                  </div>\n                ) : (\n                  messages.map((message) => (\n                    <div key={message.id} className=\"flex items-start space-x-3\">\n                      <div className={`rounded-full p-2 ${\n                        message.sender === \"user\" \n                          ? \"bg-gray-200\" \n                          : \"bg-blue-500\"\n                      }`}>\n                        {message.sender === \"user\" ? (\n                          <User size={16} className=\"text-gray-600\" />\n                        ) : (\n                          <Bot size={16} className=\"text-white\" />\n                        )}\n                      </div>\n                      <div className={`rounded-lg p-3 max-w-2xl ${\n                        message.sender === \"user\" \n                          ? \"bg-gray-100\" \n                          : \"bg-blue-50\"\n                      }`}>\n                        <p className=\"text-gray-800 whitespace-pre-wrap\">\n                          {message.message}\n                        </p>\n                      </div>\n                    </div>\n                  ))\n                )}\n                <div ref={messagesEndRef} />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Chat Input */}\n          <Card className=\"shadow-sm border border-gray-100\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <Input\n                  value={chatInput}\n                  onChange={(e) => setChatInput(e.target.value)}\n                  placeholder=\"Ask AI to generate a persona prompt for your agent\"\n                  className=\"flex-1\"\n                  onKeyPress={(e) => e.key === \"Enter\" && handleSendMessage()}\n                  data-testid=\"input-chat-message\"\n                />\n                <Button\n                  onClick={handleTransferPrompt}\n                  className=\"bg-orange-500 hover:bg-orange-600 text-white whitespace-nowrap\"\n                  data-testid=\"button-transfer-prompt\"\n                >\n                  Transfer left ready prompt\n                </Button>\n                <Button variant=\"outline\" size=\"icon\" data-testid=\"button-voice-input\">\n                  <Mic size={16} />\n                </Button>\n                <Button variant=\"outline\" size=\"icon\" data-testid=\"button-attach-file\">\n                  <Paperclip size={16} />\n                </Button>\n                <Button \n                  onClick={handleSendMessage}\n                  disabled={sendMessageMutation.isPending}\n                  data-testid=\"button-send-message\"\n                >\n                  <Send size={16} />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Right Panel - Live Preview */}\n        <div className=\"lg:col-span-1 flex flex-col space-y-4 min-h-0\">\n          <Card className=\"shadow-sm border border-gray-100\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Live Preview</h3>\n              \n              {/* Project Selection */}\n              <div className=\"mb-6\">\n                <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">Select App to Preview</Label>\n                <Select value={selectedProject || \"\"} onValueChange={setSelectedProject}>\n                  <SelectTrigger className=\"w-full\">\n                    <SelectValue placeholder=\"Choose an app to preview\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {projects.filter(p => p.status === \"completed\").map((project) => (\n                      <SelectItem key={project.id} value={project.id}>\n                        {project.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {selectedProject ? (\n                <div className=\"space-y-4\">\n                  {/* App-specific Chat */}\n                  <div className=\"border border-gray-200 rounded-lg\">\n                    <div className=\"bg-gray-50 px-3 py-2 border-b border-gray-200\">\n                      <div className=\"flex items-center space-x-2\">\n                        <MessageSquare size={16} className=\"text-gray-600\" />\n                        <span className=\"text-sm font-medium text-gray-700\">Chat with your app</span>\n                      </div>\n                    </div>\n                    \n                    {/* Chat Messages */}\n                    <div className=\"h-40 overflow-y-auto p-3 space-y-2\">\n                      {appChatMessages.length === 0 ? (\n                        <div className=\"text-center py-4\">\n                          <p className=\"text-xs text-gray-500\">Start chatting with your {projects.find(p => p.id === selectedProject)?.name}</p>\n                        </div>\n                      ) : (\n                        appChatMessages.map((msg) => (\n                          <div key={msg.id} className={`text-xs p-2 rounded max-w-[80%] ${\n                            msg.sender === \"user\" \n                              ? \"bg-blue-100 text-blue-900 ml-auto\" \n                              : \"bg-gray-100 text-gray-900\"\n                          }`}>\n                            <div className=\"whitespace-pre-wrap\">{msg.message}</div>\n                          </div>\n                        ))\n                      )}\n                    </div>\n                    \n                    {/* Chat Input */}\n                    <div className=\"border-t border-gray-200 p-3\">\n                      <div className=\"flex space-x-2\">\n                        <Input\n                          value={appChatInput}\n                          onChange={(e) => setAppChatInput(e.target.value)}\n                          placeholder={`Ask your ${projects.find(p => p.id === selectedProject)?.name.toLowerCase()}...`}\n                          className=\"text-xs\"\n                          onKeyPress={(e) => e.key === \"Enter\" && handleAppChatSend()}\n                          data-testid=\"input-app-chat\"\n                        />\n                        <Button\n                          onClick={handleAppChatSend}\n                          size=\"sm\"\n                          data-testid=\"button-send-app-chat\"\n                        >\n                          <Send size={12} />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Monitor size={32} className=\"mx-auto text-gray-400 mb-2\" />\n                  <p className=\"text-sm text-gray-500\">Select an app to start chatting</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* App Configuration - Fixed at bottom */}\n      <Card className=\"shadow-sm border border-gray-100\">\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-12 gap-4 items-end\">\n            {/* App Name */}\n            <div className=\"lg:col-span-2\">\n              <Label htmlFor=\"app-name\">App Name</Label>\n              <Input\n                id=\"app-name\"\n                value={appName}\n                onChange={(e) => setAppName(e.target.value)}\n                placeholder=\"Analytics Dashboard\"\n                data-testid=\"input-app-name\"\n              />\n            </div>\n\n            {/* Prompt */}\n            <div className=\"lg:col-span-4\">\n              <Label htmlFor=\"main-prompt\">Prompt</Label>\n              <Textarea\n                id=\"main-prompt\"\n                value={prompt}\n                onChange={(e) => setPrompt(e.target.value)}\n                rows={2}\n                placeholder=\"Create a comprehensive user analytics dashboard...\"\n                data-testid=\"textarea-main-prompt\"\n              />\n            </div>\n\n            {/* LLM Selection */}\n            <div className=\"lg:col-span-2\">\n              <Label className=\"text-sm font-medium\">LLM</Label>\n              <Select value={selectedLLM} onValueChange={setSelectedLLM}>\n                <SelectTrigger className=\"w-full\">\n                  <SelectValue placeholder=\"Select LLM\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {llmOptions.map((llm) => (\n                    <SelectItem key={llm.value} value={llm.value}>\n                      {llm.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* MCP Servers */}\n            <div className=\"lg:col-span-2\">\n              <Label className=\"text-sm font-medium\">MCP Servers</Label>\n              <Select onValueChange={(value) => toggleServer(value)}>\n                <SelectTrigger className=\"w-full\">\n                  <SelectValue placeholder={`${selectedServers.length} selected`} />\n                </SelectTrigger>\n                <SelectContent>\n                  {servers.map((server) => (\n                    <SelectItem key={server.id} value={server.id}>\n                      <div className=\"flex items-center justify-between w-full\">\n                        <span>{server.name}</span>\n                        {selectedServers.includes(server.id) && (\n                          <CheckCircle size={14} className=\"text-green-600\" />\n                        )}\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {selectedServers.length > 0 && (\n                <div className=\"flex flex-wrap gap-1 mt-1\">\n                  {selectedServers.map((serverId) => {\n                    const server = servers.find(s => s.id === serverId);\n                    return server ? (\n                      <Badge key={serverId} variant=\"secondary\" className=\"text-xs\">\n                        {server.name}\n                      </Badge>\n                    ) : null;\n                  })}\n                </div>\n              )}\n            </div>\n\n            {/* Save Button */}\n            <div className=\"lg:col-span-2\">\n              <Button\n                onClick={handleSaveApp}\n                disabled={createProjectMutation.isPending || buildProgress === \"building\"}\n                className=\"w-full\"\n                data-testid=\"button-save-app\"\n              >\n                {buildProgress === \"building\" ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Building...\n                  </>\n                ) : (\n                  \"Save App\"\n                )}\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":22208},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useLocation } from \"wouter\";\nimport { type Project } from \"@shared/schema\";\nimport { \n  Smartphone, \n  Users, \n  Network, \n  Store,\n  Eye,\n  MessageCircle,\n  DollarSign,\n  TrendingUp\n} from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const { data: projects = [], isLoading } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/projects?userId=${user?.id}`);\n      return response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  const { data: servers = [] } = useQuery({\n    queryKey: [\"/api/mcp-servers\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/mcp-servers?userId=${user?.id}`);\n      return response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  const { data: marketplaceApps = [] } = useQuery({\n    queryKey: [\"/api/marketplace\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/marketplace\");\n      return response.json();\n    },\n  });\n\n  const totalRevenue = projects\n    .filter(p => p.status === \"completed\")\n    .reduce((sum, p: any) => sum + (p.revenue || 0), 0);\n\n  const metrics = {\n    totalApps: projects.length,\n    activeProjects: projects.filter(p => p.status !== \"completed\").length,\n    mcpConnections: servers.filter((s: any) => s.status === \"connected\").length,\n    revenue: totalRevenue,\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return <Badge className=\"status-completed\">✅ Completed</Badge>;\n      case \"testing\":\n        return <Badge className=\"status-testing\">🔄 Testing</Badge>;\n      case \"development\":\n        return <Badge className=\"status-development\">🔄 Development</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-20 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Metrics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"shadow-sm border border-gray-100\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Generated Apps</p>\n                <p className=\"text-3xl font-bold text-gray-900\" data-testid=\"metric-total-apps\">\n                  {metrics.totalApps}\n                </p>\n              </div>\n              <div className=\"bg-blue-100 p-3 rounded-full\">\n                <Smartphone className=\"text-blue-600\" size={24} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-sm border border-gray-100\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Active Projects</p>\n                <p className=\"text-3xl font-bold text-gray-900\" data-testid=\"metric-active-projects\">\n                  {metrics.activeProjects}\n                </p>\n              </div>\n              <div className=\"bg-green-100 p-3 rounded-full\">\n                <Users className=\"text-green-600\" size={24} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-sm border border-gray-100\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">MCP Connections</p>\n                <p className=\"text-3xl font-bold text-gray-900\" data-testid=\"metric-mcp-connections\">\n                  {metrics.mcpConnections}\n                </p>\n              </div>\n              <div className=\"bg-purple-100 p-3 rounded-full\">\n                <Network className=\"text-purple-600\" size={24} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card \n          className=\"shadow-sm border border-gray-100 hover:shadow-md transition-shadow cursor-pointer\" \n          onClick={() => setLocation('/analytics')}\n          data-testid=\"card-revenue-metric\"\n        >\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Revenue Earned</p>\n                <p className=\"text-3xl font-bold text-gray-900\" data-testid=\"metric-revenue\">\n                  ${(metrics.revenue / 100).toFixed(2)}\n                </p>\n                <p className=\"text-sm text-green-600 flex items-center mt-1\">\n                  <TrendingUp size={14} className=\"mr-1\" />\n                  +12.5% this month\n                </p>\n              </div>\n              <div className=\"bg-green-100 p-3 rounded-full\">\n                <DollarSign className=\"text-green-600\" size={24} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Projects */}\n      <Card className=\"shadow-sm border border-gray-100\">\n        <CardContent className=\"p-6\">\n          <h2 className=\"text-xl font-bold text-gray-900 mb-6\">Recent Projects</h2>\n          \n          {projects.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-gray-500\">No projects yet. Start building your first app!</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {projects.slice(0, 3).map((project) => (\n                <Card key={project.id} className=\"border border-gray-200 hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h3 className=\"font-semibold text-gray-900\" data-testid={`project-name-${project.id}`}>\n                        {project.name}\n                      </h3>\n                      {getStatusBadge(project.status)}\n                    </div>\n                    \n                    <div className=\"space-y-2 mb-4\">\n                      <p className=\"text-sm text-gray-600\">\n                        Generated: {project.createdAt ? new Date(project.createdAt).toLocaleDateString() : 'Unknown'}\n                      </p>\n                      <p className=\"text-sm text-gray-600\">\n                        LLM: {project.llm.charAt(0).toUpperCase() + project.llm.slice(1)}\n                      </p>\n                      {project.status === \"completed\" && (project as any).revenue && (\n                        <div className=\"flex items-center justify-between\">\n                          <p className=\"text-sm text-green-600 font-medium\">\n                            Revenue: ${((project as any).revenue / 100).toFixed(2)}\n                          </p>\n                          <span className=\"text-xs text-green-600 bg-green-50 px-2 py-1 rounded-full\">\n                            +{(project as any).revenueGrowth || 15}%\n                          </span>\n                        </div>\n                      )}\n                      <p className=\"text-sm text-gray-600\">\n                        Files: {project.files?.length || 0} files\n                      </p>\n                    </div>\n                    \n                    <div className=\"flex space-x-2\">\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        onClick={() => setLocation(`/projects?view=${project.id}`)}\n                        data-testid={`button-view-${project.id}`}\n                      >\n                        <Eye size={16} className=\"mr-1\" />\n                        View\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        onClick={() => setLocation(`/chat-development`)}\n                        data-testid={`button-chat-${project.id}`}\n                      >\n                        <MessageCircle size={16} className=\"mr-1\" />\n                        Chat\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9098},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Box, Mail, Lock, Chrome, Github } from \"lucide-react\";\nimport { useAuth } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function LoginPage() {\n  const [email, setEmail] = useState(\"demo@mcpbuilder.com\");\n  const [password, setPassword] = useState(\"demo123\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", { email, password });\n      const data = await response.json();\n      \n      login(data.user);\n      \n      toast({\n        title: \"Welcome back!\",\n        description: \"You have successfully logged in.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Login failed\",\n        description: \"Invalid credentials. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen gradient-bg flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md shadow-xl\">\n        <CardContent className=\"p-8\">\n          <div className=\"text-center mb-8\">\n            <div className=\"gradient-brand text-white w-16 h-16 rounded-xl flex items-center justify-center mx-auto mb-4\">\n              <Box size={32} />\n            </div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">MCP Builder</h1>\n            <p className=\"text-gray-600 mt-2\">Build AI apps with conversation</p>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Email\n              </Label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-3 h-5 w-5 text-gray-400\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"pl-10\"\n                  placeholder=\"demo@mcpbuilder.com\"\n                  data-testid=\"input-email\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Password\n              </Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-3 h-5 w-5 text-gray-400\" />\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"pl-10\"\n                  placeholder=\"••••••••\"\n                  data-testid=\"input-password\"\n                  required\n                />\n              </div>\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full gradient-brand py-3 font-medium hover:opacity-90 transition-opacity\"\n              disabled={isLoading}\n              data-testid=\"button-login\"\n            >\n              {isLoading ? \"Signing In...\" : \"Sign In\"}\n            </Button>\n\n            <div className=\"text-center\">\n              <p className=\"text-gray-500 mb-4\">Or continue with</p>\n              <div className=\"flex space-x-4\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  className=\"flex-1\"\n                  data-testid=\"button-google-login\"\n                >\n                  <Chrome className=\"mr-2 h-4 w-4 text-red-500\" />\n                  Google\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  className=\"flex-1\"\n                  data-testid=\"button-github-login\"\n                >\n                  <Github className=\"mr-2 h-4 w-4\" />\n                  GitHub\n                </Button>\n              </div>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4564},"client/src/pages/marketplace.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { type MarketplaceApp } from \"@shared/schema\";\nimport { Search, Download, Eye, Star, Store } from \"lucide-react\";\n\nconst categories = [\n  { id: \"all\", name: \"All\" },\n  { id: \"business\", name: \"Business\" },\n  { id: \"content\", name: \"Content\" },\n  { id: \"service\", name: \"Service\" },\n  { id: \"custom\", name: \"Custom\" },\n];\n\nexport default function Marketplace() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n\n  const { data: apps = [], isLoading } = useQuery<MarketplaceApp[]>({\n    queryKey: [\"/api/marketplace\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/marketplace\");\n      return response.json();\n    },\n  });\n\n  // Add some demo marketplace apps for display\n  const demoApps = [\n    {\n      id: \"demo-1\",\n      name: \"E-commerce Store\",\n      description: \"Complete e-commerce solution\",\n      price: 4900,\n      rating: \"4.8\",\n      downloads: 1200,\n      category: \"business\",\n      icon: \"⚡\",\n    },\n    {\n      id: \"demo-2\",\n      name: \"Blog Platform\",\n      description: \"Modern blogging platform\",\n      price: 2900,\n      rating: \"4.6\",\n      downloads: 890,\n      category: \"content\",\n      icon: \"📊\",\n    },\n    {\n      id: \"demo-3\",\n      name: \"Booking System\",\n      description: \"Appointment booking system\",\n      price: 3900,\n      rating: \"4.9\",\n      downloads: 2100,\n      category: \"service\",\n      icon: \"💬\",\n    },\n  ];\n\n  const allApps = [...demoApps, ...apps];\n\n  const filteredApps = allApps.filter((app) => {\n    const matchesSearch = app.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         app.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === \"all\" || app.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const formatPrice = (priceInCents: number) => {\n    return `$${(priceInCents / 100).toFixed(0)}`;\n  };\n\n  const formatDownloads = (downloads: number | null) => {\n    if (!downloads) return \"0\";\n    if (downloads >= 1000) {\n      return `${(downloads / 1000).toFixed(1)}K`;\n    }\n    return downloads.toString();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"h-12 bg-gray-200 rounded\"></div>\n                  <div className=\"h-6 bg-gray-200 rounded\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <h2 className=\"text-2xl font-bold text-gray-900\">Marketplace</h2>\n        \n        <div className=\"flex items-center space-x-4\">\n          <div className=\"relative\">\n            <Search size={16} className=\"absolute left-3 top-3 text-gray-400\" />\n            <Input\n              placeholder=\"Search apps...\"\n              className=\"pl-10 w-64\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              data-testid=\"input-search-apps\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Category Filters */}\n      <div className=\"flex space-x-2 overflow-x-auto\">\n        {categories.map((category) => (\n          <Button\n            key={category.id}\n            variant={selectedCategory === category.id ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setSelectedCategory(category.id)}\n            className=\"whitespace-nowrap\"\n            data-testid={`filter-${category.id}`}\n          >\n            {category.name}\n          </Button>\n        ))}\n      </div>\n\n      {/* Apps Grid */}\n      {filteredApps.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Store size={48} className=\"mx-auto text-gray-400 mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No apps found</h3>\n            <p className=\"text-gray-600\">Try adjusting your search or category filter.</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredApps.map((app) => (\n            <Card key={app.id} className=\"hover:shadow-md transition-shadow border border-gray-100\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-center mb-4\">\n                  <div className=\"text-4xl mb-2\">{app.icon}</div>\n                  <h3 className=\"text-lg font-semibold text-gray-900\" data-testid={`app-name-${app.id}`}>\n                    {app.name}\n                  </h3>\n                  {app.description && (\n                    <p className=\"text-sm text-gray-600 mt-1\">{app.description}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-3 mb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-2xl font-bold text-gray-900\">\n                      {formatPrice(app.price)}\n                    </span>\n                    <div className=\"flex items-center space-x-1\">\n                      <Star size={16} className=\"text-yellow-500 fill-current\" />\n                      <span className=\"text-sm text-gray-600\">{app.rating}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-gray-600\">\n                      {formatDownloads(app.downloads)} Downloads\n                    </span>\n                    <Badge variant=\"outline\" className=\"capitalize\">\n                      {app.category}\n                    </Badge>\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-2\">\n                  <Button \n                    className=\"flex-1\" \n                    size=\"sm\"\n                    data-testid={`button-install-${app.id}`}\n                  >\n                    <Download size={16} className=\"mr-1\" />\n                    Install\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex-1\" \n                    size=\"sm\"\n                    data-testid={`button-details-${app.id}`}\n                  >\n                    <Eye size={16} className=\"mr-1\" />\n                    Details\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":7283},"client/src/pages/mcp-servers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type McpServer } from \"@shared/schema\";\nimport { \n  Plus, \n  Server, \n  Activity, \n  Settings, \n  Trash2, \n  RefreshCw,\n  WifiOff,\n  Wifi\n} from \"lucide-react\";\nimport ServerConfigModal from \"@/components/modals/server-config-modal\";\n\nexport default function MCPServers() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showConfigModal, setShowConfigModal] = useState(false);\n  const [selectedServer, setSelectedServer] = useState<McpServer | null>(null);\n\n  const { data: servers = [], isLoading } = useQuery<McpServer[]>({\n    queryKey: [\"/api/mcp-servers\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/mcp-servers?userId=${user?.id}`);\n      return response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  const deleteServerMutation = useMutation({\n    mutationFn: async (serverId: string) => {\n      return apiRequest(\"DELETE\", `/api/mcp-servers/${serverId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/mcp-servers\"] });\n      toast({\n        title: \"Server Deleted\",\n        description: \"MCP server has been removed successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Delete Failed\",\n        description: \"Failed to delete the server. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleConnectionMutation = useMutation({\n    mutationFn: async ({ serverId, status }: { serverId: string; status: string }) => {\n      const newStatus = status === \"connected\" ? \"disconnected\" : \"connected\";\n      return apiRequest(\"PUT\", `/api/mcp-servers/${serverId}`, { status: newStatus });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/mcp-servers\"] });\n    },\n  });\n\n  const handleAddServer = () => {\n    setSelectedServer(null);\n    setShowConfigModal(true);\n  };\n\n  const handleConfigureServer = (server: McpServer) => {\n    setSelectedServer(server);\n    setShowConfigModal(true);\n  };\n\n  const handleDeleteServer = async (serverId: string) => {\n    if (confirm(\"Are you sure you want to delete this server?\")) {\n      await deleteServerMutation.mutateAsync(serverId);\n    }\n  };\n\n  const handleToggleConnection = async (server: McpServer) => {\n    await toggleConnectionMutation.mutateAsync({\n      serverId: server.id,\n      status: server.status,\n    });\n  };\n\n  const getStatusIcon = (status: string) => {\n    return status === \"connected\" ? (\n      <Wifi size={16} className=\"text-green-500\" />\n    ) : (\n      <WifiOff size={16} className=\"text-red-500\" />\n    );\n  };\n\n  const getStatusColor = (status: string) => {\n    return status === \"connected\" ? \"text-green-600\" : \"text-red-600\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"h-6 bg-gray-200 rounded\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold text-gray-900\">MCP Servers</h2>\n        <Button onClick={handleAddServer} data-testid=\"button-add-server\">\n          <Plus size={16} className=\"mr-2\" />\n          Add New Server\n        </Button>\n      </div>\n\n      {/* Servers Grid */}\n      {servers.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Server size={48} className=\"mx-auto text-gray-400 mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No MCP servers configured</h3>\n            <p className=\"text-gray-600 mb-4\">Add your first MCP server to start integrating external services.</p>\n            <Button onClick={handleAddServer}>\n              <Plus size={16} className=\"mr-2\" />\n              Add Server\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {servers.map((server) => (\n            <Card key={server.id} className=\"hover:shadow-md transition-shadow border border-gray-100\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-semibold text-gray-900\" data-testid={`server-name-${server.id}`}>\n                    {server.name}\n                  </h3>\n                  <div className=\"flex items-center space-x-2\">\n                    {getStatusIcon(server.status)}\n                    <span className={`text-sm font-medium ${getStatusColor(server.status)}`}>\n                      {server.status === \"connected\" ? \"Connected\" : \"Disconnected\"}\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2 mb-4 text-sm text-gray-600\">\n                  <div className=\"flex items-center justify-between\">\n                    <span>Latency:</span>\n                    <span className=\"font-medium\">{server.latency}ms</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Type:</span>\n                    <Badge variant=\"outline\">{server.type.toUpperCase()}</Badge>\n                  </div>\n                  {server.description && (\n                    <p className=\"text-gray-600 mt-2\">{server.description}</p>\n                  )}\n                </div>\n\n                <div className=\"flex flex-wrap gap-2\">\n                  <Button\n                    size=\"sm\"\n                    variant={server.status === \"connected\" ? \"destructive\" : \"default\"}\n                    onClick={() => handleToggleConnection(server)}\n                    disabled={toggleConnectionMutation.isPending}\n                    data-testid={`button-toggle-${server.id}`}\n                  >\n                    {server.status === \"connected\" ? \"Disconnect\" : \"Connect\"}\n                  </Button>\n                  \n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => handleToggleConnection(server)}\n                    disabled={toggleConnectionMutation.isPending}\n                    data-testid={`button-refresh-${server.id}`}\n                  >\n                    <RefreshCw size={14} />\n                  </Button>\n\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => handleConfigureServer(server)}\n                    data-testid={`button-configure-${server.id}`}\n                  >\n                    <Settings size={14} />\n                  </Button>\n\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => handleDeleteServer(server.id)}\n                    disabled={deleteServerMutation.isPending}\n                    data-testid={`button-delete-${server.id}`}\n                  >\n                    <Trash2 size={14} />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Configuration Modal */}\n      <ServerConfigModal\n        server={selectedServer}\n        open={showConfigModal}\n        onOpenChange={setShowConfigModal}\n      />\n    </div>\n  );\n}\n","size_bytes":8258},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/projects.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useSearch } from \"wouter\";\nimport { type Project } from \"@shared/schema\";\nimport { Eye, MessageCircle, Calendar, Cpu, FileText } from \"lucide-react\";\nimport ProjectDetailsModal from \"@/components/modals/project-details-modal\";\nimport ChatAppModal from \"@/components/modals/chat-app-modal\";\n\nexport default function Projects() {\n  const { user } = useAuth();\n  const searchParams = useSearch();\n  const [selectedProject, setSelectedProject] = useState<Project | null>(null);\n  const [showDetailsModal, setShowDetailsModal] = useState(false);\n  const [showChatModal, setShowChatModal] = useState(false);\n\n  const { data: projects = [], isLoading } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/projects?userId=${user?.id}`);\n      return response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  // Auto-open project details modal if view parameter is present\n  useEffect(() => {\n    const urlParams = new URLSearchParams(searchParams);\n    const viewProjectId = urlParams.get('view');\n    \n    if (viewProjectId && projects.length > 0) {\n      const project = projects.find(p => p.id === viewProjectId);\n      if (project) {\n        setSelectedProject(project);\n        setShowDetailsModal(true);\n      }\n    }\n  }, [searchParams, projects]);\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return <Badge className=\"status-completed\">✅ Completed</Badge>;\n      case \"testing\":\n        return <Badge className=\"status-testing\">🔄 Testing</Badge>;\n      case \"development\":\n        return <Badge className=\"status-development\">🔄 Development</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const handleViewProject = (project: Project) => {\n    setSelectedProject(project);\n    setShowDetailsModal(true);\n  };\n\n  const handleChatWithApp = (project: Project) => {\n    setSelectedProject(project);\n    setShowChatModal(true);\n  };\n\n  const stats = {\n    total: projects.length,\n    completed: projects.filter(p => p.status === \"completed\").length,\n    inDev: projects.filter(p => p.status !== \"completed\").length,\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"h-6 bg-gray-200 rounded\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Stats Header */}\n      <div className=\"bg-white rounded-lg p-6 border border-gray-100\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-2xl font-bold text-gray-900\">Projects</h2>\n          <div className=\"text-sm text-gray-600 space-x-4\">\n            <span>Total: <span className=\"font-semibold\" data-testid=\"stat-total\">{stats.total}</span></span>\n            <span>Completed: <span className=\"font-semibold text-green-600\" data-testid=\"stat-completed\">{stats.completed}</span></span>\n            <span>In Development: <span className=\"font-semibold text-orange-600\" data-testid=\"stat-in-dev\">{stats.inDev}</span></span>\n          </div>\n        </div>\n      </div>\n\n      {/* Projects Grid */}\n      {projects.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <FileText size={48} className=\"mx-auto text-gray-400 mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No projects yet</h3>\n            <p className=\"text-gray-600\">Start building your first app in the Chat Development section.</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {projects.map((project) => (\n            <Card key={project.id} className=\"hover:shadow-md transition-shadow border border-gray-100\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-semibold text-gray-900\" data-testid={`project-name-${project.id}`}>\n                    {project.name}\n                  </h3>\n                  {getStatusBadge(project.status)}\n                </div>\n\n                <div className=\"space-y-2 mb-4 text-sm text-gray-600\">\n                  <div className=\"flex items-center\">\n                    <Calendar size={16} className=\"mr-2\" />\n                    <span>Generated: {project.createdAt ? new Date(project.createdAt).toLocaleDateString() : 'Unknown'}</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Cpu size={16} className=\"mr-2\" />\n                    <span>LLM: {project.llm.charAt(0).toUpperCase() + project.llm.slice(1)}</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <FileText size={16} className=\"mr-2\" />\n                    <span>Files: {project.files?.length || 0} files ({\n                      project.files?.reduce((total, file) => {\n                        const size = parseFloat(file.size.replace(/[^\\d.]/g, ''));\n                        return total + size;\n                      }, 0).toFixed(1) || 0\n                    }kb)</span>\n                  </div>\n                </div>\n\n                {project.description && (\n                  <p className=\"text-sm text-gray-600 mb-4 line-clamp-2\">\n                    {project.description}\n                  </p>\n                )}\n\n                <div className=\"flex space-x-2\">\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\"\n                    onClick={() => handleViewProject(project)}\n                    data-testid={`button-view-${project.id}`}\n                  >\n                    <Eye size={16} className=\"mr-1\" />\n                    View\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\"\n                    onClick={() => handleChatWithApp(project)}\n                    data-testid={`button-chat-${project.id}`}\n                  >\n                    <MessageCircle size={16} className=\"mr-1\" />\n                    Chat\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Modals */}\n      {selectedProject && (\n        <>\n          <ProjectDetailsModal\n            project={selectedProject}\n            open={showDetailsModal}\n            onOpenChange={setShowDetailsModal}\n          />\n          <ChatAppModal\n            project={selectedProject}\n            open={showChatModal}\n            onOpenChange={setShowChatModal}\n          />\n        </>\n      )}\n    </div>\n  );\n}\n","size_bytes":7523},"client/src/components/layout/header.tsx":{"content":"import { Bell } from \"lucide-react\";\nimport { useAuth } from \"@/lib/auth\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Header() {\n  const { user } = useAuth();\n\n  const getPageTitle = () => {\n    const path = window.location.pathname;\n    const titles: Record<string, string> = {\n      \"/\": \"Dashboard\",\n      \"/dashboard\": \"Dashboard\",\n      \"/chat\": \"Chat Development\",\n      \"/projects\": \"Projects\",\n      \"/servers\": \"MCP Servers\",\n      \"/marketplace\": \"Marketplace\",\n      \"/analytics\": \"Analytics\",\n      \"/billing\": \"Billing\",\n      \"/admin\": \"Admin Panel\",\n    };\n    return titles[path] || \"Dashboard\";\n  };\n\n  return (\n    <header className=\"bg-white border-b border-gray-200 px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold text-gray-900\" data-testid=\"page-title\">\n          {getPageTitle()}\n        </h1>\n        \n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-notifications\">\n            <Bell size={20} className=\"text-gray-500\" />\n          </Button>\n          \n          <div className=\"flex items-center space-x-3\">\n            <div className=\"text-right\">\n              <p className=\"text-sm font-medium text-gray-900\" data-testid=\"text-user-name\">\n                {user?.name || \"User\"}\n              </p>\n              <p className=\"text-xs text-gray-500\" data-testid=\"text-user-plan\">\n                {user?.plan || \"Free Plan\"}\n              </p>\n            </div>\n            <div className=\"w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center text-white text-sm font-medium\">\n              {user?.name?.split(' ').map((n: string) => n[0]).join('') || 'U'}\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1880},"client/src/components/layout/main-layout.tsx":{"content":"import { ReactNode } from \"react\";\nimport Sidebar from \"./sidebar\";\nimport Header from \"./header\";\n\ninterface MainLayoutProps {\n  children: ReactNode;\n}\n\nexport default function MainLayout({ children }: MainLayoutProps) {\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex\">\n      <Sidebar />\n      <div className=\"flex-1 ml-64\">\n        <Header />\n        <main className=\"p-6\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":457},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  BarChart3, \n  MessageCircle, \n  Folder, \n  Server, \n  Store, \n  TrendingUp, \n  CreditCard, \n  Settings,\n  Box\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/dashboard\", icon: BarChart3 },\n  { name: \"Chat Development\", href: \"/chat\", icon: MessageCircle },\n  { name: \"Projects\", href: \"/projects\", icon: Folder },\n  { name: \"MCP Servers\", href: \"/servers\", icon: Server },\n  { name: \"Marketplace\", href: \"/marketplace\", icon: Store },\n  { name: \"Analytics\", href: \"/analytics\", icon: TrendingUp },\n  { name: \"Billing\", href: \"/billing\", icon: CreditCard },\n  { name: \"Admin\", href: \"/admin\", icon: Settings },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"fixed left-0 top-0 h-full w-64 bg-slate-900 text-white\">\n      <div className=\"p-6 border-b border-slate-700\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"gradient-brand w-10 h-10 rounded-lg flex items-center justify-center\">\n            <Box size={20} />\n          </div>\n          <div>\n            <h1 className=\"font-bold text-lg\">MCP Builder</h1>\n          </div>\n        </div>\n      </div>\n\n      <nav className=\"p-4 space-y-2\">\n        {navigation.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.href || (location === \"/\" && item.href === \"/dashboard\");\n          \n          return (\n            <Link key={item.name} href={item.href}>\n              <div\n                className={cn(\n                  \"flex items-center space-x-3 px-4 py-3 rounded-lg hover:bg-slate-800 transition-colors cursor-pointer\",\n                  isActive && \"sidebar-active\"\n                )}\n                data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <Icon size={20} />\n                <span>{item.name}</span>\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n    </div>\n  );\n}\n","size_bytes":2074},"client/src/components/modals/chat-app-modal.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { type Project } from \"@shared/schema\";\nimport { X, User, Send, Sparkles } from \"lucide-react\";\n\ninterface ChatMessage {\n  id: string;\n  sender: \"user\" | \"app\";\n  message: string;\n  timestamp: Date;\n}\n\ninterface ChatAppModalProps {\n  project: Project;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function ChatAppModal({ \n  project, \n  open, \n  onOpenChange \n}: ChatAppModalProps) {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Auto-scroll to bottom when new messages are added\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  // Initialize conversation when modal opens\n  useEffect(() => {\n    if (open && messages.length === 0) {\n      const welcomeMessage: ChatMessage = {\n        id: \"welcome\",\n        sender: \"app\",\n        message: getWelcomeMessage(),\n        timestamp: new Date(),\n      };\n      setMessages([welcomeMessage]);\n    }\n  }, [open, messages.length, project]);\n\n  // Reset messages when modal closes\n  useEffect(() => {\n    if (!open) {\n      setMessages([]);\n    }\n  }, [open]);\n\n  const getWelcomeMessage = () => {\n    switch (project.name.toLowerCase()) {\n      case \"restaurant app\":\n        return \"Welcome to your Restaurant Management System! I can help you with:\\n\\n• Managing menu items and categories\\n• Processing orders and payments\\n• Staff management and scheduling\\n• Viewing sales reports and analytics\\n• Customer management\\n\\nHow can I assist you today?\";\n      \n      case \"customer support\":\n        return \"Hello! I'm your Customer Support Assistant. I can help you with:\\n\\n• Creating and managing support tickets\\n• Live chat with customers\\n• Knowledge base management\\n• Escalating issues to human agents\\n• Tracking customer satisfaction\\n\\nWhat would you like to do?\";\n      \n      case \"tour guide\":\n        return \"Welcome to your Interactive Tour Guide! I can help you with:\\n\\n• Finding nearby attractions and points of interest\\n• Planning optimal tour routes\\n• Providing historical and cultural information\\n• Managing bookings and schedules\\n• Offline map functionality\\n\\nHow can I enhance your tour experience?\";\n      \n      default:\n        return `Welcome to your ${project.name}! I'm here to help you navigate and use all the features of your application. What would you like to know or do?`;\n    }\n  };\n\n  const generateAppResponse = (userMessage: string): string => {\n    const message = userMessage.toLowerCase();\n    \n    // Restaurant App responses\n    if (project.name.toLowerCase().includes(\"restaurant\")) {\n      if (message.includes(\"menu\") || message.includes(\"item\")) {\n        return \"To manage menu items:\\n\\n1. Navigate to the Admin Dashboard\\n2. Click on 'Menu Management'\\n3. Select 'Add New Item' or edit existing items\\n4. Fill in the item details (name, price, description, category)\\n5. Upload an image if desired\\n6. Click 'Save Item'\\n\\nThe new item will immediately appear in your customer-facing menu! Would you like help with anything else?\";\n      }\n      \n      if (message.includes(\"order\")) {\n        return \"For order management:\\n\\n• **New Orders**: Appear in real-time on your dashboard\\n• **Order Status**: Update from 'Received' → 'Preparing' → 'Ready' → 'Completed'\\n• **Kitchen Display**: Shows active orders with preparation times\\n• **Payment Processing**: Integrated with your payment gateway\\n\\nYou can also view order history and generate reports. Need help with a specific order process?\";\n      }\n      \n      if (message.includes(\"staff\") || message.includes(\"employee\")) {\n        return \"Staff management features include:\\n\\n• **Add Staff Members**: Create accounts for waiters, chefs, managers\\n• **Role Permissions**: Different access levels for different positions\\n• **Shift Scheduling**: Plan and manage work schedules\\n• **Performance Tracking**: Monitor order handling and customer ratings\\n\\nWould you like to add a new staff member or modify existing permissions?\";\n      }\n    }\n    \n    // Customer Support App responses\n    if (project.name.toLowerCase().includes(\"support\")) {\n      if (message.includes(\"ticket\")) {\n        return \"Ticket management made easy:\\n\\n• **Create Tickets**: Automatically generated from customer inquiries\\n• **Priority Levels**: High, Medium, Low based on issue type\\n• **Assignment**: Route to appropriate support agents\\n• **Status Tracking**: Open → In Progress → Resolved → Closed\\n• **SLA Monitoring**: Track response times and resolution metrics\\n\\nWould you like to create a new ticket or check existing ones?\";\n      }\n      \n      if (message.includes(\"chat\")) {\n        return \"Live chat functionality:\\n\\n• **Real-time Messaging**: Instant communication with customers\\n• **Chat Routing**: Direct customers to available agents\\n• **File Sharing**: Support image and document uploads\\n• **Chat History**: Complete conversation records\\n• **Canned Responses**: Quick replies for common questions\\n\\nThe chat widget is active on your website. Need help with chat settings?\";\n      }\n    }\n    \n    // Tour Guide App responses  \n    if (project.name.toLowerCase().includes(\"tour\")) {\n      if (message.includes(\"route\") || message.includes(\"plan\")) {\n        return \"Route planning features:\\n\\n• **Smart Routing**: Optimized paths based on time and distance\\n• **Interest Categories**: Historical sites, restaurants, museums, parks\\n• **Custom Tours**: Create personalized experiences\\n• **Time Estimates**: Accurate duration calculations\\n• **Weather Integration**: Adjusted recommendations based on conditions\\n\\nWould you like help creating a new tour route or modifying an existing one?\";\n      }\n      \n      if (message.includes(\"location\") || message.includes(\"place\")) {\n        return \"Location services include:\\n\\n• **GPS Integration**: Real-time location tracking\\n• **Nearby Attractions**: Discover points of interest within radius\\n• **Detailed Information**: History, hours, contact details, reviews\\n• **Photo Gallery**: High-quality images of locations\\n• **Audio Guides**: Narrated information for key sites\\n\\nWhat specific location information are you looking for?\";\n      }\n    }\n    \n    // Generic responses\n    const genericResponses = [\n      `Great question! Your ${project.name} has comprehensive features to handle that. Let me walk you through the process step by step.`,\n      `I can definitely help you with that in your ${project.name}! Here's what you need to know...`,\n      `That's a common question about ${project.name}. The feature you're looking for is designed to be intuitive and user-friendly.`,\n    ];\n    \n    return genericResponses[Math.floor(Math.random() * genericResponses.length)] + \n           \"\\n\\nIf you need more specific guidance, please let me know exactly what you're trying to accomplish!\";\n  };\n\n  const handleSendMessage = async () => {\n    if (!inputMessage.trim()) return;\n\n    // Add user message\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      sender: \"user\",\n      message: inputMessage,\n      timestamp: new Date(),\n    };\n    \n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage(\"\");\n    setIsTyping(true);\n\n    // Simulate app response delay\n    setTimeout(() => {\n      const appResponse: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        sender: \"app\",\n        message: generateAppResponse(inputMessage),\n        timestamp: new Date(),\n      };\n      \n      setMessages(prev => [...prev, appResponse]);\n      setIsTyping(false);\n    }, 1500);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] flex flex-col\">\n        <DialogHeader className=\"flex-shrink-0\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-gradient-brand text-white p-2 rounded-lg\">\n                <Sparkles size={20} />\n              </div>\n              <div>\n                <DialogTitle>Chat with {project.name}</DialogTitle>\n                <DialogDescription>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    <span>Interactive demo of your generated application</span>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {project.status === \"completed\" ? \"Live\" : \"Preview\"}\n                    </Badge>\n                  </div>\n                </DialogDescription>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-close-chat-modal\"\n            >\n              <X size={20} />\n            </Button>\n          </div>\n        </DialogHeader>\n\n        {/* Chat Messages */}\n        <Card className=\"flex-1 min-h-0 shadow-sm border border-gray-100\">\n          <CardContent className=\"p-6 h-full overflow-y-auto\">\n            <div className=\"space-y-4\">\n              {messages.map((message) => (\n                <div key={message.id} className=\"flex items-start space-x-3\">\n                  <div className={`rounded-full p-2 flex-shrink-0 ${\n                    message.sender === \"user\" \n                      ? \"bg-gray-200\" \n                      : \"bg-gradient-brand text-white\"\n                  }`}>\n                    {message.sender === \"user\" ? (\n                      <User size={16} className=\"text-gray-600\" />\n                    ) : (\n                      <Sparkles size={16} />\n                    )}\n                  </div>\n                  <div className={`rounded-lg p-3 max-w-2xl ${\n                    message.sender === \"user\" \n                      ? \"bg-gray-100\" \n                      : \"bg-blue-50\"\n                  }`}>\n                    <p className=\"text-gray-800 whitespace-pre-wrap\">\n                      {message.message}\n                    </p>\n                    <p className=\"text-xs text-gray-500 mt-2\">\n                      {message.timestamp.toLocaleTimeString()}\n                    </p>\n                  </div>\n                </div>\n              ))}\n              \n              {isTyping && (\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"bg-gradient-brand text-white rounded-full p-2\">\n                    <Sparkles size={16} />\n                  </div>\n                  <div className=\"bg-blue-50 rounded-lg p-3\">\n                    <div className=\"flex space-x-1\">\n                      <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-bounce\"></div>\n                      <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-bounce\" style={{ animationDelay: \"0.1s\" }}></div>\n                      <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-bounce\" style={{ animationDelay: \"0.2s\" }}></div>\n                    </div>\n                  </div>\n                </div>\n              )}\n              \n              <div ref={messagesEndRef} />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Chat Input */}\n        <div className=\"flex-shrink-0 p-4 border-t\">\n          <div className=\"flex items-center space-x-3\">\n            <Input\n              value={inputMessage}\n              onChange={(e) => setInputMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder={`Ask about your ${project.name}...`}\n              className=\"flex-1\"\n              data-testid=\"input-chat-app-message\"\n            />\n            <Button\n              onClick={handleSendMessage}\n              disabled={!inputMessage.trim() || isTyping}\n              data-testid=\"button-send-chat-app-message\"\n            >\n              <Send size={16} />\n            </Button>\n          </div>\n          <p className=\"text-xs text-gray-500 mt-2\">\n            This is a simulated conversation with your generated application.\n          </p>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":12856},"client/src/components/modals/project-details-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { type Project } from \"@shared/schema\";\nimport { \n  Calendar, \n  Cpu, \n  Server, \n  FileText, \n  Download, \n  MessageCircle,\n  ExternalLink,\n  X,\n  Upload,\n  CheckCircle\n} from \"lucide-react\";\n\ninterface ProjectDetailsModalProps {\n  project: Project;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function ProjectDetailsModal({ \n  project, \n  open, \n  onOpenChange \n}: ProjectDetailsModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isDeploying, setIsDeploying] = useState(false);\n\n  const publishProjectMutation = useMutation({\n    mutationFn: async (projectId: string) => {\n      return apiRequest(\"PATCH\", `/api/projects/${projectId}`, { published: \"true\" });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({\n        title: \"Published Successfully\",\n        description: \"Your project has been published to the marketplace!\",\n      });\n      setIsDeploying(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Publish Failed\",\n        description: \"Failed to publish project. Please try again.\",\n        variant: \"destructive\",\n      });\n      setIsDeploying(false);\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return <Badge className=\"status-completed\">✅ Completed</Badge>;\n      case \"testing\":\n        return <Badge className=\"status-testing\">🔄 Testing</Badge>;\n      case \"development\":\n        return <Badge className=\"status-development\">🔄 Development</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const handlePublish = async () => {\n    if (project.status !== \"completed\") {\n      toast({\n        title: \"Cannot Publish\",\n        description: \"Only completed projects can be published to the marketplace.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if ((project as any).published === \"true\") {\n      toast({\n        title: \"Already Published\",\n        description: \"This project is already published to the marketplace.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsDeploying(true);\n    try {\n      await publishProjectMutation.mutateAsync(project.id);\n    } catch (error) {\n      // Error handled by mutation\n    }\n  };\n\n  const getTotalFileSize = () => {\n    if (!project.files || project.files.length === 0) return \"0kb\";\n    \n    const totalSize = project.files.reduce((total, file) => {\n      const size = parseFloat(file.size.replace(/[^\\d.]/g, ''));\n      return total + size;\n    }, 0);\n    \n    return `${totalSize.toFixed(1)}kb`;\n  };\n\n  const getFileIcon = (type: string) => {\n    switch (type.toLowerCase()) {\n      case \"javascript\":\n      case \"js\":\n        return \"📜\";\n      case \"html\":\n      case \"htm\":\n        return \"🌐\";\n      case \"css\":\n        return \"🎨\";\n      case \"json\":\n        return \"📋\";\n      case \"typescript\":\n      case \"ts\":\n        return \"📘\";\n      case \"python\":\n      case \"py\":\n        return \"🐍\";\n      case \"sql\":\n        return \"🗃️\";\n      case \"yml\":\n      case \"yaml\":\n        return \"⚙️\";\n      case \"md\":\n      case \"markdown\":\n        return \"📝\";\n      case \"txt\":\n        return \"📄\";\n      case \"xml\":\n        return \"🔖\";\n      case \"config\":\n        return \"⚙️\";\n      default:\n        return \"📄\";\n    }\n  };\n\n  const getFileTypeColor = (type: string) => {\n    switch (type.toLowerCase()) {\n      case \"javascript\":\n      case \"js\":\n        return \"text-yellow-600 bg-yellow-50 border-yellow-200\";\n      case \"html\":\n      case \"htm\":\n        return \"text-orange-600 bg-orange-50 border-orange-200\";\n      case \"css\":\n        return \"text-blue-600 bg-blue-50 border-blue-200\";\n      case \"json\":\n        return \"text-green-600 bg-green-50 border-green-200\";\n      case \"typescript\":\n      case \"ts\":\n        return \"text-blue-700 bg-blue-50 border-blue-200\";\n      case \"python\":\n      case \"py\":\n        return \"text-green-700 bg-green-50 border-green-200\";\n      default:\n        return \"text-gray-600 bg-gray-50 border-gray-200\";\n    }\n  };\n\n  const handleDownloadFile = (file: any) => {\n    toast({\n      title: \"Download Started\",\n      description: `Downloading ${file.name}...`,\n    });\n  };\n\n  const handleViewFile = (file: any) => {\n    toast({\n      title: \"File Preview\",\n      description: `Opening ${file.name} in preview mode...`,\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <DialogTitle className=\"text-2xl font-bold text-gray-900\">\n                {project.name}\n              </DialogTitle>\n              <DialogDescription className=\"mt-2\">\n                Project details and deployment options\n              </DialogDescription>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-close-project-modal\"\n            >\n              <X size={20} />\n            </Button>\n          </div>\n        </DialogHeader>\n\n        <div className=\"space-y-6 mt-6\">\n          {/* Project Status Overview */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">Status</label>\n              <div className=\"mt-1\">\n                {getStatusBadge(project.status)}\n              </div>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">Progress</label>\n              <p className=\"text-gray-900 font-semibold mt-1\">\n                {project.status === \"completed\" ? \"100%\" : \n                 project.status === \"testing\" ? \"85%\" : \"60%\"}\n              </p>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">LLM Used</label>\n              <div className=\"flex items-center mt-1\">\n                <Cpu size={16} className=\"mr-2 text-gray-400\" />\n                <span className=\"text-gray-900\">\n                  {project.llm.charAt(0).toUpperCase() + project.llm.slice(1)}\n                </span>\n              </div>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">Generated</label>\n              <div className=\"flex items-center mt-1\">\n                <Calendar size={16} className=\"mr-2 text-gray-400\" />\n                <span className=\"text-gray-900\">\n                  {project.createdAt ? new Date(project.createdAt).toLocaleDateString() : 'Unknown'}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* MCP Servers */}\n          <div>\n            <label className=\"text-sm font-medium text-gray-700\">MCP Servers</label>\n            <div className=\"flex items-center mt-1\">\n              <Server size={16} className=\"mr-2 text-gray-400\" />\n              <span className=\"text-gray-900\">\n                {project.mcpServers?.join(\", \") || \"None\"}\n              </span>\n            </div>\n          </div>\n\n          {/* Project Description */}\n          {project.description && (\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">Description</label>\n              <p className=\"text-gray-900 mt-1\">{project.description}</p>\n            </div>\n          )}\n\n          {/* Project Files */}\n          <div>\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <label className=\"text-sm font-medium text-gray-700\">Project Files</label>\n                <p className=\"text-xs text-gray-500 mt-1\">Files generated during development</p>\n              </div>\n              <div className=\"text-right\">\n                <span className=\"text-sm text-gray-600\">\n                  {project.files?.length || 0} files • {getTotalFileSize()}\n                </span>\n              </div>\n            </div>\n            \n            {!project.files || project.files.length === 0 ? (\n              <Card className=\"border-dashed border-gray-300 bg-gray-50\">\n                <CardContent className=\"p-6 text-center\">\n                  <FileText size={32} className=\"mx-auto text-gray-400 mb-2\" />\n                  <p className=\"text-gray-500 text-sm\">No files generated yet</p>\n                  <p className=\"text-xs text-gray-400 mt-1\">Files will appear here once the project is built</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-3\">\n                {project.files.map((file, index) => (\n                  <Card key={index} className=\"border-gray-100 hover:shadow-sm transition-shadow\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center flex-1\">\n                          <div className=\"flex items-center justify-center w-10 h-10 rounded-lg border mr-3\">\n                            <span className=\"text-lg\">\n                              {getFileIcon(file.type)}\n                            </span>\n                          </div>\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2\">\n                              <p className=\"font-medium text-gray-900\">{file.name}</p>\n                              <Badge \n                                variant=\"outline\" \n                                className={`text-xs ${getFileTypeColor(file.type)}`}\n                              >\n                                {file.type.toUpperCase()}\n                              </Badge>\n                            </div>\n                            <p className=\"text-sm text-gray-500 mt-1\">\n                              Created during project generation • {file.size}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2 ml-4\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleViewFile(file)}\n                            className=\"text-gray-600 hover:text-gray-900\"\n                            data-testid={`button-view-file-${index}`}\n                          >\n                            <FileText size={14} className=\"mr-1\" />\n                            View\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDownloadFile(file)}\n                            className=\"text-gray-600 hover:text-gray-900\"\n                            data-testid={`button-download-file-${index}`}\n                          >\n                            <Download size={14} className=\"mr-1\" />\n                            Download\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n                \n                {/* File Summary */}\n                <Card className=\"bg-blue-50 border-blue-200\">\n                  <CardContent className=\"p-3\">\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <div className=\"flex items-center\">\n                        <FileText size={16} className=\"mr-2 text-blue-600\" />\n                        <span className=\"text-blue-900 font-medium\">\n                          Files Summary\n                        </span>\n                      </div>\n                      <div className=\"text-blue-700\">\n                        <span className=\"font-medium\">{project.files?.length || 0}</span> files • \n                        <span className=\"font-medium\">{getTotalFileSize()}</span> total\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </div>\n\n          {/* Original Prompt */}\n          {project.prompt && (\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">Original Prompt</label>\n              <Card className=\"mt-2 border-gray-100\">\n                <CardContent className=\"p-4\">\n                  <p className=\"text-sm text-gray-700 whitespace-pre-wrap\">\n                    {project.prompt}\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex space-x-3 pt-4 border-t\">\n            {(project as any).published === \"true\" ? (\n              <Button\n                disabled\n                className=\"bg-green-100 text-green-700 cursor-not-allowed\"\n                data-testid=\"button-published-project\"\n              >\n                <CheckCircle size={16} className=\"mr-2\" />\n                Published\n              </Button>\n            ) : (\n              <Button\n                onClick={handlePublish}\n                disabled={isDeploying || project.status !== \"completed\"}\n                data-testid=\"button-publish-project\"\n              >\n                <Upload size={16} className=\"mr-2\" />\n                {isDeploying ? \"Publishing...\" : \"Publish\"}\n              </Button>\n            )}\n            \n            <Button\n              variant=\"outline\"\n              data-testid=\"button-chat-with-project\"\n            >\n              <MessageCircle size={16} className=\"mr-2\" />\n              Chat\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-close-project-details\"\n            >\n              Close\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":14766},"client/src/components/modals/server-config-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { type McpServer } from \"@shared/schema\";\nimport { X, Server } from \"lucide-react\";\n\nconst serverConfigSchema = z.object({\n  name: z.string().min(1, \"Server name is required\"),\n  type: z.enum([\"sse\", \"stdio\", \"http\", \"websocket\", \"grpc\"]),\n  url: z.string().optional(),\n  description: z.string().optional(),\n});\n\ntype ServerConfigForm = z.infer<typeof serverConfigSchema>;\n\ninterface ServerConfigModalProps {\n  server: McpServer | null;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst serverTypes = [\n  { value: \"sse\", label: \"SSE (Server-Sent Events)\", description: \"Real-time streaming\" },\n  { value: \"stdio\", label: \"Stdio\", description: \"Standard input/output\" },\n  { value: \"http\", label: \"HTTP\", description: \"REST API connections\" },\n  { value: \"websocket\", label: \"WebSocket\", description: \"Bidirectional real-time\" },\n  { value: \"grpc\", label: \"gRPC\", description: \"High-performance RPC\" },\n];\n\nexport default function ServerConfigModal({ \n  server, \n  open, \n  onOpenChange \n}: ServerConfigModalProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm<ServerConfigForm>({\n    resolver: zodResolver(serverConfigSchema),\n    defaultValues: {\n      name: \"\",\n      type: \"sse\",\n      url: \"\",\n      description: \"\",\n    },\n  });\n\n  // Reset form when server changes or modal opens\n  useEffect(() => {\n    if (open) {\n      if (server) {\n        // Editing existing server\n        form.reset({\n          name: server.name,\n          type: server.type as any,\n          url: server.url || \"\",\n          description: server.description || \"\",\n        });\n      } else {\n        // Adding new server\n        form.reset({\n          name: \"\",\n          type: \"sse\",\n          url: \"\",\n          description: \"\",\n        });\n      }\n    }\n  }, [server, open, form]);\n\n  const createServerMutation = useMutation({\n    mutationFn: async (data: ServerConfigForm) => {\n      return apiRequest(\"POST\", \"/api/mcp-servers\", {\n        ...data,\n        userId: user?.id,\n        status: \"disconnected\",\n        latency: 0,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/mcp-servers\"] });\n      toast({\n        title: \"Server Added\",\n        description: \"MCP server has been configured successfully.\",\n      });\n      onOpenChange(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to Add Server\",\n        description: \"Please check your configuration and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateServerMutation = useMutation({\n    mutationFn: async (data: ServerConfigForm) => {\n      if (!server) throw new Error(\"No server to update\");\n      return apiRequest(\"PUT\", `/api/mcp-servers/${server.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/mcp-servers\"] });\n      toast({\n        title: \"Server Updated\",\n        description: \"MCP server configuration has been updated.\",\n      });\n      onOpenChange(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to Update Server\",\n        description: \"Please check your configuration and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = async (data: ServerConfigForm) => {\n    setIsSubmitting(true);\n    \n    try {\n      if (server) {\n        await updateServerMutation.mutateAsync(data);\n      } else {\n        await createServerMutation.mutateAsync(data);\n      }\n    } catch (error) {\n      // Error handled by mutations\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const selectedType = form.watch(\"type\");\n  const requiresUrl = selectedType !== \"stdio\";\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-blue-100 p-2 rounded-lg\">\n                <Server size={20} className=\"text-blue-600\" />\n              </div>\n              <div>\n                <DialogTitle>\n                  {server ? \"Configure MCP Server\" : \"Add New MCP Server\"}\n                </DialogTitle>\n                <DialogDescription>\n                  {server ? \"Update server configuration\" : \"Configure a new MCP server connection\"}\n                </DialogDescription>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-close-server-modal\"\n            >\n              <X size={20} />\n            </Button>\n          </div>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6 mt-6\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Server Name</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Database MCP\"\n                      data-testid=\"input-server-name\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"type\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Server Type</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-server-type\">\n                        <SelectValue placeholder=\"Select server type\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {serverTypes.map((type) => (\n                        <SelectItem key={type.value} value={type.value}>\n                          <div>\n                            <div className=\"font-medium\">{type.label}</div>\n                            <div className=\"text-sm text-gray-500\">{type.description}</div>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {requiresUrl && (\n              <FormField\n                control={form.control}\n                name=\"url\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      {selectedType === \"http\" ? \"HTTP URL\" : \n                       selectedType === \"websocket\" ? \"WebSocket URL\" : \n                       selectedType === \"grpc\" ? \"gRPC Endpoint\" : \"URL/Endpoint\"}\n                    </FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder={\n                          selectedType === \"http\" ? \"https://api.example.com\" :\n                          selectedType === \"websocket\" ? \"wss://api.example.com\" :\n                          selectedType === \"grpc\" ? \"grpc://api.example.com:9090\" :\n                          selectedType === \"sse\" ? \"wss://sse.example.com\" :\n                          \"Enter endpoint URL\"\n                        }\n                        data-testid=\"input-server-url\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Real-time database connections...\"\n                      rows={3}\n                      data-testid=\"textarea-server-description\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex space-x-3 pt-4 border-t\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                className=\"flex-1\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-server-config\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"flex-1\"\n                disabled={isSubmitting}\n                data-testid=\"button-save-server-config\"\n              >\n                {isSubmitting ? \"Saving...\" : server ? \"Update Server\" : \"Add Server\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10218},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}